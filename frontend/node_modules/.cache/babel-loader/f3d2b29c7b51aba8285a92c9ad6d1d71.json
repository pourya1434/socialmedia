{"ast":null,"code":"import { useRef, useMemo, useCallback, useDebugValue } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim/index.js';\nimport { OBJECT, SWRConfig as SWRConfig$1, defaultConfig, withArgs, SWRGlobalState, serialize, createCacheHelper, isUndefined, getTimestamp, UNDEFINED, isFunction, internalMutate, useIsomorphicLayoutEffect, subscribeCallback, IS_SERVER, rAF, IS_REACT_LEGACY, mergeObjects, revalidateEvents } from 'swr/_internal';\nexport { mutate, preload, useSWRConfig } from 'swr/_internal';\nconst WITH_DEDUPE = {\n  dedupe: true\n};\n\nconst useSWRHandler = (_key, fetcher, config) => {\n  const {\n    cache,\n    compare,\n    suspense,\n    fallbackData,\n    revalidateOnMount,\n    refreshInterval,\n    refreshWhenHidden,\n    refreshWhenOffline,\n    keepPreviousData\n  } = config;\n  const [EVENT_REVALIDATORS, MUTATION, FETCH] = SWRGlobalState.get(cache); // `key` is the identifier of the SWR `data` state, `keyInfo` holds extra\n  // states such as `error` and `isValidating` inside,\n  // all of them are derived from `_key`.\n  // `fnArg` is the argument/arguments parsed from the key, which will be passed\n  // to the fetcher.\n\n  const [key, fnArg] = serialize(_key); // If it's the initial render of this hook.\n\n  const initialMountedRef = useRef(false); // If the hook is unmounted already. This will be used to prevent some effects\n  // to be called after unmounting.\n\n  const unmountedRef = useRef(false); // Refs to keep the key and config.\n\n  const keyRef = useRef(key);\n  const fetcherRef = useRef(fetcher);\n  const configRef = useRef(config);\n\n  const getConfig = () => configRef.current;\n\n  const isActive = () => getConfig().isVisible() && getConfig().isOnline();\n\n  const [getCache, setCache, subscribeCache] = createCacheHelper(cache, key);\n  const stateDependencies = useRef({}).current; // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const fallback = isUndefined(fallbackData) ? config.fallback[key] : fallbackData;\n\n  const isEqual = (prev, current) => {\n    let equal = true;\n\n    for (const _ in stateDependencies) {\n      const t = _;\n\n      if (!compare(current[t], prev[t])) {\n        if (t === 'data' && isUndefined(prev[t])) {\n          if (!compare(current[t], returnedData)) {\n            equal = false;\n          }\n        } else {\n          equal = false;\n        }\n      }\n    }\n\n    return equal;\n  };\n\n  const getSnapshot = useMemo(() => {\n    const shouldStartRequest = (() => {\n      if (!key) return false;\n      if (!fetcher) return false; // If `revalidateOnMount` is set, we take the value directly.\n\n      if (!isUndefined(revalidateOnMount)) return revalidateOnMount; // If it's paused, we skip revalidation.\n\n      if (getConfig().isPaused()) return false;\n      if (suspense) return false;\n      return true;\n    })();\n\n    const getSelectedCache = () => {\n      const state = getCache(); // We only select the needed fields from the state.\n\n      const snapshot = mergeObjects(state);\n      delete snapshot._k;\n\n      if (!shouldStartRequest) {\n        return snapshot;\n      }\n\n      return {\n        isValidating: true,\n        isLoading: true,\n        ...snapshot\n      };\n    };\n\n    let memorizedSnapshot = getSelectedCache();\n    return () => {\n      const snapshot = getSelectedCache();\n      return isEqual(snapshot, memorizedSnapshot) ? memorizedSnapshot : memorizedSnapshot = snapshot;\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cache, key]); // Get the current state that SWR should return.\n\n  const cached = useSyncExternalStore(useCallback(callback => subscribeCache(key, (prev, current) => {\n    if (!isEqual(prev, current)) callback();\n  }), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [cache, key]), getSnapshot, getSnapshot);\n  const isInitialMount = !initialMountedRef.current;\n  const cachedData = cached.data;\n  const data = isUndefined(cachedData) ? fallback : cachedData;\n  const error = cached.error; // Use a ref to store previously returned data. Use the initial data as its initial value.\n\n  const laggyDataRef = useRef(data);\n  const returnedData = keepPreviousData ? isUndefined(cachedData) ? laggyDataRef.current : cachedData : data; // - Suspense mode and there's stale data for the initial render.\n  // - Not suspense mode and there is no fallback data and `revalidateIfStale` is enabled.\n  // - `revalidateIfStale` is enabled but `data` is not defined.\n\n  const shouldDoInitialRevalidation = (() => {\n    // If `revalidateOnMount` is set, we take the value directly.\n    if (isInitialMount && !isUndefined(revalidateOnMount)) return revalidateOnMount; // If it's paused, we skip revalidation.\n\n    if (getConfig().isPaused()) return false; // Under suspense mode, it will always fetch on render if there is no\n    // stale data so no need to revalidate immediately mount it again.\n    // If data exists, only revalidate if `revalidateIfStale` is true.\n\n    if (suspense) return isUndefined(data) ? false : config.revalidateIfStale; // If there is no stale data, we need to revalidate when mount;\n    // If `revalidateIfStale` is set to true, we will always revalidate.\n\n    return isUndefined(data) || config.revalidateIfStale;\n  })(); // Resolve the default validating state:\n  // If it's able to validate, and it should revalidate when mount, this will be true.\n\n\n  const defaultValidatingState = !!(key && fetcher && isInitialMount && shouldDoInitialRevalidation);\n  const isValidating = isUndefined(cached.isValidating) ? defaultValidatingState : cached.isValidating;\n  const isLoading = isUndefined(cached.isLoading) ? defaultValidatingState : cached.isLoading; // The revalidation function is a carefully crafted wrapper of the original\n  // `fetcher`, to correctly handle the many edge cases.\n\n  const revalidate = useCallback(async revalidateOpts => {\n    const currentFetcher = fetcherRef.current;\n\n    if (!key || !currentFetcher || unmountedRef.current || getConfig().isPaused()) {\n      return false;\n    }\n\n    let newData;\n    let startAt;\n    let loading = true;\n    const opts = revalidateOpts || {}; // If there is no ongoing concurrent request, or `dedupe` is not set, a\n    // new request should be initiated.\n\n    const shouldStartNewRequest = !FETCH[key] || !opts.dedupe;\n    /*\n     For React 17\n     Do unmount check for calls:\n     If key has changed during the revalidation, or the component has been\n     unmounted, old dispatch and old event callbacks should not take any\n     effect\n     For React 18\n    only check if key has changed\n    https://github.com/reactwg/react-18/discussions/82\n    */\n\n    const callbackSafeguard = () => {\n      if (IS_REACT_LEGACY) {\n        return !unmountedRef.current && key === keyRef.current && initialMountedRef.current;\n      }\n\n      return key === keyRef.current;\n    }; // The final state object when the request finishes.\n\n\n    const finalState = {\n      isValidating: false,\n      isLoading: false\n    };\n\n    const finishRequestAndUpdateState = () => {\n      setCache(finalState);\n    };\n\n    const cleanupState = () => {\n      // Check if it's still the same request before deleting it.\n      const requestInfo = FETCH[key];\n\n      if (requestInfo && requestInfo[1] === startAt) {\n        delete FETCH[key];\n      }\n    }; // Start fetching. Change the `isValidating` state, update the cache.\n\n\n    const initialState = {\n      isValidating: true\n    }; // It is in the `isLoading` state, if and only if there is no cached data.\n    // This bypasses fallback data and laggy data.\n\n    if (isUndefined(getCache().data)) {\n      initialState.isLoading = true;\n    }\n\n    try {\n      if (shouldStartNewRequest) {\n        setCache(initialState); // If no cache is being rendered currently (it shows a blank page),\n        // we trigger the loading slow event.\n\n        if (config.loadingTimeout && isUndefined(getCache().data)) {\n          setTimeout(() => {\n            if (loading && callbackSafeguard()) {\n              getConfig().onLoadingSlow(key, config);\n            }\n          }, config.loadingTimeout);\n        } // Start the request and save the timestamp.\n        // Key must be truthy if entering here.\n\n\n        FETCH[key] = [currentFetcher(fnArg), getTimestamp()];\n      }\n\n      [newData, startAt] = FETCH[key];\n      newData = await newData;\n\n      if (shouldStartNewRequest) {\n        // If the request isn't interrupted, clean it up after the\n        // deduplication interval.\n        setTimeout(cleanupState, config.dedupingInterval);\n      } // If there're other ongoing request(s), started after the current one,\n      // we need to ignore the current one to avoid possible race conditions:\n      //   req1------------------>res1        (current one)\n      //        req2---------------->res2\n      // the request that fired later will always be kept.\n      // The timestamp maybe be `undefined` or a number\n\n\n      if (!FETCH[key] || FETCH[key][1] !== startAt) {\n        if (shouldStartNewRequest) {\n          if (callbackSafeguard()) {\n            getConfig().onDiscarded(key);\n          }\n        }\n\n        return false;\n      } // Clear error.\n\n\n      finalState.error = UNDEFINED; // If there're other mutations(s), that overlapped with the current revalidation:\n      // case 1:\n      //   req------------------>res\n      //       mutate------>end\n      // case 2:\n      //         req------------>res\n      //   mutate------>end\n      // case 3:\n      //   req------------------>res\n      //       mutate-------...---------->\n      // we have to ignore the revalidation result (res) because it's no longer fresh.\n      // meanwhile, a new revalidation should be triggered when the mutation ends.\n\n      const mutationInfo = MUTATION[key];\n\n      if (!isUndefined(mutationInfo) && ( // case 1\n      startAt <= mutationInfo[0] || // case 2\n      startAt <= mutationInfo[1] || // case 3\n      mutationInfo[1] === 0)) {\n        finishRequestAndUpdateState();\n\n        if (shouldStartNewRequest) {\n          if (callbackSafeguard()) {\n            getConfig().onDiscarded(key);\n          }\n        }\n\n        return false;\n      } // Deep compare with the latest state to avoid extra re-renders.\n      // For local state, compare and assign.\n\n\n      const cacheData = getCache().data; // Since the compare fn could be custom fn\n      // cacheData might be different from newData even when compare fn returns True\n\n      finalState.data = compare(cacheData, newData) ? cacheData : newData; // Trigger the successful callback if it's the original request.\n\n      if (shouldStartNewRequest) {\n        if (callbackSafeguard()) {\n          getConfig().onSuccess(newData, key, config);\n        }\n      }\n    } catch (err) {\n      cleanupState();\n      const currentConfig = getConfig();\n      const {\n        shouldRetryOnError\n      } = currentConfig; // Not paused, we continue handling the error. Otherwise, discard it.\n\n      if (!currentConfig.isPaused()) {\n        // Get a new error, don't use deep comparison for errors.\n        finalState.error = err; // Error event and retry logic. Only for the actual request, not\n        // deduped ones.\n\n        if (shouldStartNewRequest && callbackSafeguard()) {\n          currentConfig.onError(err, key, currentConfig);\n\n          if (shouldRetryOnError === true || isFunction(shouldRetryOnError) && shouldRetryOnError(err)) {\n            if (isActive()) {\n              // If it's inactive, stop. It will auto-revalidate when\n              // refocusing or reconnecting.\n              // When retrying, deduplication is always enabled.\n              currentConfig.onErrorRetry(err, key, currentConfig, revalidate, {\n                retryCount: (opts.retryCount || 0) + 1,\n                dedupe: true\n              });\n            }\n          }\n        }\n      }\n    } // Mark loading as stopped.\n\n\n    loading = false; // Update the current hook's state.\n\n    finishRequestAndUpdateState();\n    return true;\n  }, // `setState` is immutable, and `eventsCallback`, `fnArg`, and\n  // `keyValidating` are depending on `key`, so we can exclude them from\n  // the deps array.\n  //\n  // FIXME:\n  // `fn` and `config` might be changed during the lifecycle,\n  // but they might be changed every render like this.\n  // `useSWR('key', () => fetch('/api/'), { suspense: true })`\n  // So we omit the values from the deps array\n  // even though it might cause unexpected behaviors.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [key, cache]); // Similar to the global mutate but bound to the current cache and key.\n  // `cache` isn't allowed to change during the lifecycle.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const boundMutate = useCallback( // Use callback to make sure `keyRef.current` returns latest result every time\n  function () {\n    for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return internalMutate(cache, keyRef.current, ...args);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  []); // The logic for updating refs.\n\n  useIsomorphicLayoutEffect(() => {\n    fetcherRef.current = fetcher;\n    configRef.current = config; // Handle laggy data updates. If there's cached data of the current key,\n    // it'll be the correct reference.\n\n    if (!isUndefined(cachedData)) {\n      laggyDataRef.current = cachedData;\n    }\n  }); // After mounted or key changed.\n\n  useIsomorphicLayoutEffect(() => {\n    if (!key) return;\n    const softRevalidate = revalidate.bind(UNDEFINED, WITH_DEDUPE); // Expose revalidators to global event listeners. So we can trigger\n    // revalidation from the outside.\n\n    let nextFocusRevalidatedAt = 0;\n\n    const onRevalidate = type => {\n      if (type == revalidateEvents.FOCUS_EVENT) {\n        const now = Date.now();\n\n        if (getConfig().revalidateOnFocus && now > nextFocusRevalidatedAt && isActive()) {\n          nextFocusRevalidatedAt = now + getConfig().focusThrottleInterval;\n          softRevalidate();\n        }\n      } else if (type == revalidateEvents.RECONNECT_EVENT) {\n        if (getConfig().revalidateOnReconnect && isActive()) {\n          softRevalidate();\n        }\n      } else if (type == revalidateEvents.MUTATE_EVENT) {\n        return revalidate();\n      }\n\n      return;\n    };\n\n    const unsubEvents = subscribeCallback(key, EVENT_REVALIDATORS, onRevalidate); // Mark the component as mounted and update corresponding refs.\n\n    unmountedRef.current = false;\n    keyRef.current = key;\n    initialMountedRef.current = true; // Keep the original key in the cache.\n\n    setCache({\n      _k: fnArg\n    }); // Trigger a revalidation.\n\n    if (shouldDoInitialRevalidation) {\n      if (isUndefined(data) || IS_SERVER) {\n        // Revalidate immediately.\n        softRevalidate();\n      } else {\n        // Delay the revalidate if we have data to return so we won't block\n        // rendering.\n        rAF(softRevalidate);\n      }\n    }\n\n    return () => {\n      // Mark it as unmounted.\n      unmountedRef.current = true;\n      unsubEvents();\n    };\n  }, [key]); // Polling\n\n  useIsomorphicLayoutEffect(() => {\n    let timer;\n\n    function next() {\n      // Use the passed interval\n      // ...or invoke the function with the updated data to get the interval\n      const interval = isFunction(refreshInterval) ? refreshInterval(data) : refreshInterval; // We only start the next interval if `refreshInterval` is not 0, and:\n      // - `force` is true, which is the start of polling\n      // - or `timer` is not 0, which means the effect wasn't canceled\n\n      if (interval && timer !== -1) {\n        timer = setTimeout(execute, interval);\n      }\n    }\n\n    function execute() {\n      // Check if it's OK to execute:\n      // Only revalidate when the page is visible, online, and not errored.\n      if (!getCache().error && (refreshWhenHidden || getConfig().isVisible()) && (refreshWhenOffline || getConfig().isOnline())) {\n        revalidate(WITH_DEDUPE).then(next);\n      } else {\n        // Schedule the next interval to check again.\n        next();\n      }\n    }\n\n    next();\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n        timer = -1;\n      }\n    };\n  }, [refreshInterval, refreshWhenHidden, refreshWhenOffline, key]); // Display debug info in React DevTools.\n\n  useDebugValue(returnedData); // In Suspense mode, we can't return the empty `data` state.\n  // If there is an `error`, the `error` needs to be thrown to the error boundary.\n  // If there is no `error`, the `revalidation` promise needs to be thrown to\n  // the suspense boundary.\n\n  if (suspense && isUndefined(data) && key) {\n    // SWR should throw when trying to use Suspense on the server with React 18,\n    // without providing any initial data. See:\n    // https://github.com/vercel/swr/issues/1832\n    if (!IS_REACT_LEGACY && IS_SERVER) {\n      throw new Error('Fallback data is required when using suspense in SSR.');\n    } // Always update fetcher and config refs even with the Suspense mode.\n\n\n    fetcherRef.current = fetcher;\n    configRef.current = config;\n    unmountedRef.current = false;\n    throw isUndefined(error) ? revalidate(WITH_DEDUPE) : error;\n  }\n\n  return {\n    mutate: boundMutate,\n\n    get data() {\n      stateDependencies.data = true;\n      return returnedData;\n    },\n\n    get error() {\n      stateDependencies.error = true;\n      return error;\n    },\n\n    get isValidating() {\n      stateDependencies.isValidating = true;\n      return isValidating;\n    },\n\n    get isLoading() {\n      stateDependencies.isLoading = true;\n      return isLoading;\n    }\n\n  };\n};\n\nconst SWRConfig = OBJECT.defineProperty(SWRConfig$1, 'defaultValue', {\n  value: defaultConfig\n});\n\nconst unstable_serialize = key => serialize(key)[0];\n/**\n * A hook to fetch data.\n *\n * @link https://swr.vercel.app\n * @example\n * ```jsx\n * import useSWR from 'swr'\n * function Profile() {\n *   const { data, error } = useSWR('/api/user', fetcher)\n *   if (error) return <div>failed to load</div>\n *   if (!data) return <div>loading...</div>\n *   return <div>hello {data.name}!</div>\n * }\n * ```\n */\n\n\nvar useSWR = withArgs(useSWRHandler); // useSWR\n\nexport { SWRConfig, useSWR as default, unstable_serialize };","map":{"version":3,"names":["useRef","useMemo","useCallback","useDebugValue","useSyncExternalStore","OBJECT","SWRConfig","SWRConfig$1","defaultConfig","withArgs","SWRGlobalState","serialize","createCacheHelper","isUndefined","getTimestamp","UNDEFINED","isFunction","internalMutate","useIsomorphicLayoutEffect","subscribeCallback","IS_SERVER","rAF","IS_REACT_LEGACY","mergeObjects","revalidateEvents","mutate","preload","useSWRConfig","WITH_DEDUPE","dedupe","useSWRHandler","_key","fetcher","config","cache","compare","suspense","fallbackData","revalidateOnMount","refreshInterval","refreshWhenHidden","refreshWhenOffline","keepPreviousData","EVENT_REVALIDATORS","MUTATION","FETCH","get","key","fnArg","initialMountedRef","unmountedRef","keyRef","fetcherRef","configRef","getConfig","current","isActive","isVisible","isOnline","getCache","setCache","subscribeCache","stateDependencies","fallback","isEqual","prev","equal","_","t","returnedData","getSnapshot","shouldStartRequest","isPaused","getSelectedCache","state","snapshot","_k","isValidating","isLoading","memorizedSnapshot","cached","callback","isInitialMount","cachedData","data","error","laggyDataRef","shouldDoInitialRevalidation","revalidateIfStale","defaultValidatingState","revalidate","revalidateOpts","currentFetcher","newData","startAt","loading","opts","shouldStartNewRequest","callbackSafeguard","finalState","finishRequestAndUpdateState","cleanupState","requestInfo","initialState","loadingTimeout","setTimeout","onLoadingSlow","dedupingInterval","onDiscarded","mutationInfo","cacheData","onSuccess","err","currentConfig","shouldRetryOnError","onError","onErrorRetry","retryCount","boundMutate","args","softRevalidate","bind","nextFocusRevalidatedAt","onRevalidate","type","FOCUS_EVENT","now","Date","revalidateOnFocus","focusThrottleInterval","RECONNECT_EVENT","revalidateOnReconnect","MUTATE_EVENT","unsubEvents","timer","next","interval","execute","then","clearTimeout","Error","defineProperty","value","unstable_serialize","useSWR","default"],"sources":["/home/pourya/codes/socialmedia/frontend/node_modules/swr/core/dist/index.mjs"],"sourcesContent":["import { useRef, useMemo, useCallback, useDebugValue } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim/index.js';\nimport { OBJECT, SWRConfig as SWRConfig$1, defaultConfig, withArgs, SWRGlobalState, serialize, createCacheHelper, isUndefined, getTimestamp, UNDEFINED, isFunction, internalMutate, useIsomorphicLayoutEffect, subscribeCallback, IS_SERVER, rAF, IS_REACT_LEGACY, mergeObjects, revalidateEvents } from 'swr/_internal';\nexport { mutate, preload, useSWRConfig } from 'swr/_internal';\n\nconst WITH_DEDUPE = {\n    dedupe: true\n};\nconst useSWRHandler = (_key, fetcher, config)=>{\n    const { cache , compare , suspense , fallbackData , revalidateOnMount , refreshInterval , refreshWhenHidden , refreshWhenOffline , keepPreviousData  } = config;\n    const [EVENT_REVALIDATORS, MUTATION, FETCH] = SWRGlobalState.get(cache);\n    // `key` is the identifier of the SWR `data` state, `keyInfo` holds extra\n    // states such as `error` and `isValidating` inside,\n    // all of them are derived from `_key`.\n    // `fnArg` is the argument/arguments parsed from the key, which will be passed\n    // to the fetcher.\n    const [key, fnArg] = serialize(_key);\n    // If it's the initial render of this hook.\n    const initialMountedRef = useRef(false);\n    // If the hook is unmounted already. This will be used to prevent some effects\n    // to be called after unmounting.\n    const unmountedRef = useRef(false);\n    // Refs to keep the key and config.\n    const keyRef = useRef(key);\n    const fetcherRef = useRef(fetcher);\n    const configRef = useRef(config);\n    const getConfig = ()=>configRef.current;\n    const isActive = ()=>getConfig().isVisible() && getConfig().isOnline();\n    const [getCache, setCache, subscribeCache] = createCacheHelper(cache, key);\n    const stateDependencies = useRef({}).current;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const fallback = isUndefined(fallbackData) ? config.fallback[key] : fallbackData;\n    const isEqual = (prev, current)=>{\n        let equal = true;\n        for(const _ in stateDependencies){\n            const t = _;\n            if (!compare(current[t], prev[t])) {\n                if (t === 'data' && isUndefined(prev[t])) {\n                    if (!compare(current[t], returnedData)) {\n                        equal = false;\n                    }\n                } else {\n                    equal = false;\n                }\n            }\n        }\n        return equal;\n    };\n    const getSnapshot = useMemo(()=>{\n        const shouldStartRequest = (()=>{\n            if (!key) return false;\n            if (!fetcher) return false;\n            // If `revalidateOnMount` is set, we take the value directly.\n            if (!isUndefined(revalidateOnMount)) return revalidateOnMount;\n            // If it's paused, we skip revalidation.\n            if (getConfig().isPaused()) return false;\n            if (suspense) return false;\n            return true;\n        })();\n        const getSelectedCache = ()=>{\n            const state = getCache();\n            // We only select the needed fields from the state.\n            const snapshot = mergeObjects(state);\n            delete snapshot._k;\n            if (!shouldStartRequest) {\n                return snapshot;\n            }\n            return {\n                isValidating: true,\n                isLoading: true,\n                ...snapshot\n            };\n        };\n        let memorizedSnapshot = getSelectedCache();\n        return ()=>{\n            const snapshot = getSelectedCache();\n            return isEqual(snapshot, memorizedSnapshot) ? memorizedSnapshot : memorizedSnapshot = snapshot;\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        cache,\n        key\n    ]);\n    // Get the current state that SWR should return.\n    const cached = useSyncExternalStore(useCallback((callback)=>subscribeCache(key, (prev, current)=>{\n            if (!isEqual(prev, current)) callback();\n        }), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        cache,\n        key\n    ]), getSnapshot, getSnapshot);\n    const isInitialMount = !initialMountedRef.current;\n    const cachedData = cached.data;\n    const data = isUndefined(cachedData) ? fallback : cachedData;\n    const error = cached.error;\n    // Use a ref to store previously returned data. Use the initial data as its initial value.\n    const laggyDataRef = useRef(data);\n    const returnedData = keepPreviousData ? isUndefined(cachedData) ? laggyDataRef.current : cachedData : data;\n    // - Suspense mode and there's stale data for the initial render.\n    // - Not suspense mode and there is no fallback data and `revalidateIfStale` is enabled.\n    // - `revalidateIfStale` is enabled but `data` is not defined.\n    const shouldDoInitialRevalidation = (()=>{\n        // If `revalidateOnMount` is set, we take the value directly.\n        if (isInitialMount && !isUndefined(revalidateOnMount)) return revalidateOnMount;\n        // If it's paused, we skip revalidation.\n        if (getConfig().isPaused()) return false;\n        // Under suspense mode, it will always fetch on render if there is no\n        // stale data so no need to revalidate immediately mount it again.\n        // If data exists, only revalidate if `revalidateIfStale` is true.\n        if (suspense) return isUndefined(data) ? false : config.revalidateIfStale;\n        // If there is no stale data, we need to revalidate when mount;\n        // If `revalidateIfStale` is set to true, we will always revalidate.\n        return isUndefined(data) || config.revalidateIfStale;\n    })();\n    // Resolve the default validating state:\n    // If it's able to validate, and it should revalidate when mount, this will be true.\n    const defaultValidatingState = !!(key && fetcher && isInitialMount && shouldDoInitialRevalidation);\n    const isValidating = isUndefined(cached.isValidating) ? defaultValidatingState : cached.isValidating;\n    const isLoading = isUndefined(cached.isLoading) ? defaultValidatingState : cached.isLoading;\n    // The revalidation function is a carefully crafted wrapper of the original\n    // `fetcher`, to correctly handle the many edge cases.\n    const revalidate = useCallback(async (revalidateOpts)=>{\n        const currentFetcher = fetcherRef.current;\n        if (!key || !currentFetcher || unmountedRef.current || getConfig().isPaused()) {\n            return false;\n        }\n        let newData;\n        let startAt;\n        let loading = true;\n        const opts = revalidateOpts || {};\n        // If there is no ongoing concurrent request, or `dedupe` is not set, a\n        // new request should be initiated.\n        const shouldStartNewRequest = !FETCH[key] || !opts.dedupe;\n        /*\n         For React 17\n         Do unmount check for calls:\n         If key has changed during the revalidation, or the component has been\n         unmounted, old dispatch and old event callbacks should not take any\n         effect\n\n        For React 18\n        only check if key has changed\n        https://github.com/reactwg/react-18/discussions/82\n      */ const callbackSafeguard = ()=>{\n            if (IS_REACT_LEGACY) {\n                return !unmountedRef.current && key === keyRef.current && initialMountedRef.current;\n            }\n            return key === keyRef.current;\n        };\n        // The final state object when the request finishes.\n        const finalState = {\n            isValidating: false,\n            isLoading: false\n        };\n        const finishRequestAndUpdateState = ()=>{\n            setCache(finalState);\n        };\n        const cleanupState = ()=>{\n            // Check if it's still the same request before deleting it.\n            const requestInfo = FETCH[key];\n            if (requestInfo && requestInfo[1] === startAt) {\n                delete FETCH[key];\n            }\n        };\n        // Start fetching. Change the `isValidating` state, update the cache.\n        const initialState = {\n            isValidating: true\n        };\n        // It is in the `isLoading` state, if and only if there is no cached data.\n        // This bypasses fallback data and laggy data.\n        if (isUndefined(getCache().data)) {\n            initialState.isLoading = true;\n        }\n        try {\n            if (shouldStartNewRequest) {\n                setCache(initialState);\n                // If no cache is being rendered currently (it shows a blank page),\n                // we trigger the loading slow event.\n                if (config.loadingTimeout && isUndefined(getCache().data)) {\n                    setTimeout(()=>{\n                        if (loading && callbackSafeguard()) {\n                            getConfig().onLoadingSlow(key, config);\n                        }\n                    }, config.loadingTimeout);\n                }\n                // Start the request and save the timestamp.\n                // Key must be truthy if entering here.\n                FETCH[key] = [\n                    currentFetcher(fnArg),\n                    getTimestamp()\n                ];\n            }\n            [newData, startAt] = FETCH[key];\n            newData = await newData;\n            if (shouldStartNewRequest) {\n                // If the request isn't interrupted, clean it up after the\n                // deduplication interval.\n                setTimeout(cleanupState, config.dedupingInterval);\n            }\n            // If there're other ongoing request(s), started after the current one,\n            // we need to ignore the current one to avoid possible race conditions:\n            //   req1------------------>res1        (current one)\n            //        req2---------------->res2\n            // the request that fired later will always be kept.\n            // The timestamp maybe be `undefined` or a number\n            if (!FETCH[key] || FETCH[key][1] !== startAt) {\n                if (shouldStartNewRequest) {\n                    if (callbackSafeguard()) {\n                        getConfig().onDiscarded(key);\n                    }\n                }\n                return false;\n            }\n            // Clear error.\n            finalState.error = UNDEFINED;\n            // If there're other mutations(s), that overlapped with the current revalidation:\n            // case 1:\n            //   req------------------>res\n            //       mutate------>end\n            // case 2:\n            //         req------------>res\n            //   mutate------>end\n            // case 3:\n            //   req------------------>res\n            //       mutate-------...---------->\n            // we have to ignore the revalidation result (res) because it's no longer fresh.\n            // meanwhile, a new revalidation should be triggered when the mutation ends.\n            const mutationInfo = MUTATION[key];\n            if (!isUndefined(mutationInfo) && // case 1\n            (startAt <= mutationInfo[0] || // case 2\n            startAt <= mutationInfo[1] || // case 3\n            mutationInfo[1] === 0)) {\n                finishRequestAndUpdateState();\n                if (shouldStartNewRequest) {\n                    if (callbackSafeguard()) {\n                        getConfig().onDiscarded(key);\n                    }\n                }\n                return false;\n            }\n            // Deep compare with the latest state to avoid extra re-renders.\n            // For local state, compare and assign.\n            const cacheData = getCache().data;\n            // Since the compare fn could be custom fn\n            // cacheData might be different from newData even when compare fn returns True\n            finalState.data = compare(cacheData, newData) ? cacheData : newData;\n            // Trigger the successful callback if it's the original request.\n            if (shouldStartNewRequest) {\n                if (callbackSafeguard()) {\n                    getConfig().onSuccess(newData, key, config);\n                }\n            }\n        } catch (err) {\n            cleanupState();\n            const currentConfig = getConfig();\n            const { shouldRetryOnError  } = currentConfig;\n            // Not paused, we continue handling the error. Otherwise, discard it.\n            if (!currentConfig.isPaused()) {\n                // Get a new error, don't use deep comparison for errors.\n                finalState.error = err;\n                // Error event and retry logic. Only for the actual request, not\n                // deduped ones.\n                if (shouldStartNewRequest && callbackSafeguard()) {\n                    currentConfig.onError(err, key, currentConfig);\n                    if (shouldRetryOnError === true || isFunction(shouldRetryOnError) && shouldRetryOnError(err)) {\n                        if (isActive()) {\n                            // If it's inactive, stop. It will auto-revalidate when\n                            // refocusing or reconnecting.\n                            // When retrying, deduplication is always enabled.\n                            currentConfig.onErrorRetry(err, key, currentConfig, revalidate, {\n                                retryCount: (opts.retryCount || 0) + 1,\n                                dedupe: true\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        // Mark loading as stopped.\n        loading = false;\n        // Update the current hook's state.\n        finishRequestAndUpdateState();\n        return true;\n    }, // `setState` is immutable, and `eventsCallback`, `fnArg`, and\n    // `keyValidating` are depending on `key`, so we can exclude them from\n    // the deps array.\n    //\n    // FIXME:\n    // `fn` and `config` might be changed during the lifecycle,\n    // but they might be changed every render like this.\n    // `useSWR('key', () => fetch('/api/'), { suspense: true })`\n    // So we omit the values from the deps array\n    // even though it might cause unexpected behaviors.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        key,\n        cache\n    ]);\n    // Similar to the global mutate but bound to the current cache and key.\n    // `cache` isn't allowed to change during the lifecycle.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const boundMutate = useCallback(// Use callback to make sure `keyRef.current` returns latest result every time\n    (...args)=>{\n        return internalMutate(cache, keyRef.current, ...args);\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    []);\n    // The logic for updating refs.\n    useIsomorphicLayoutEffect(()=>{\n        fetcherRef.current = fetcher;\n        configRef.current = config;\n        // Handle laggy data updates. If there's cached data of the current key,\n        // it'll be the correct reference.\n        if (!isUndefined(cachedData)) {\n            laggyDataRef.current = cachedData;\n        }\n    });\n    // After mounted or key changed.\n    useIsomorphicLayoutEffect(()=>{\n        if (!key) return;\n        const softRevalidate = revalidate.bind(UNDEFINED, WITH_DEDUPE);\n        // Expose revalidators to global event listeners. So we can trigger\n        // revalidation from the outside.\n        let nextFocusRevalidatedAt = 0;\n        const onRevalidate = (type)=>{\n            if (type == revalidateEvents.FOCUS_EVENT) {\n                const now = Date.now();\n                if (getConfig().revalidateOnFocus && now > nextFocusRevalidatedAt && isActive()) {\n                    nextFocusRevalidatedAt = now + getConfig().focusThrottleInterval;\n                    softRevalidate();\n                }\n            } else if (type == revalidateEvents.RECONNECT_EVENT) {\n                if (getConfig().revalidateOnReconnect && isActive()) {\n                    softRevalidate();\n                }\n            } else if (type == revalidateEvents.MUTATE_EVENT) {\n                return revalidate();\n            }\n            return;\n        };\n        const unsubEvents = subscribeCallback(key, EVENT_REVALIDATORS, onRevalidate);\n        // Mark the component as mounted and update corresponding refs.\n        unmountedRef.current = false;\n        keyRef.current = key;\n        initialMountedRef.current = true;\n        // Keep the original key in the cache.\n        setCache({\n            _k: fnArg\n        });\n        // Trigger a revalidation.\n        if (shouldDoInitialRevalidation) {\n            if (isUndefined(data) || IS_SERVER) {\n                // Revalidate immediately.\n                softRevalidate();\n            } else {\n                // Delay the revalidate if we have data to return so we won't block\n                // rendering.\n                rAF(softRevalidate);\n            }\n        }\n        return ()=>{\n            // Mark it as unmounted.\n            unmountedRef.current = true;\n            unsubEvents();\n        };\n    }, [\n        key\n    ]);\n    // Polling\n    useIsomorphicLayoutEffect(()=>{\n        let timer;\n        function next() {\n            // Use the passed interval\n            // ...or invoke the function with the updated data to get the interval\n            const interval = isFunction(refreshInterval) ? refreshInterval(data) : refreshInterval;\n            // We only start the next interval if `refreshInterval` is not 0, and:\n            // - `force` is true, which is the start of polling\n            // - or `timer` is not 0, which means the effect wasn't canceled\n            if (interval && timer !== -1) {\n                timer = setTimeout(execute, interval);\n            }\n        }\n        function execute() {\n            // Check if it's OK to execute:\n            // Only revalidate when the page is visible, online, and not errored.\n            if (!getCache().error && (refreshWhenHidden || getConfig().isVisible()) && (refreshWhenOffline || getConfig().isOnline())) {\n                revalidate(WITH_DEDUPE).then(next);\n            } else {\n                // Schedule the next interval to check again.\n                next();\n            }\n        }\n        next();\n        return ()=>{\n            if (timer) {\n                clearTimeout(timer);\n                timer = -1;\n            }\n        };\n    }, [\n        refreshInterval,\n        refreshWhenHidden,\n        refreshWhenOffline,\n        key\n    ]);\n    // Display debug info in React DevTools.\n    useDebugValue(returnedData);\n    // In Suspense mode, we can't return the empty `data` state.\n    // If there is an `error`, the `error` needs to be thrown to the error boundary.\n    // If there is no `error`, the `revalidation` promise needs to be thrown to\n    // the suspense boundary.\n    if (suspense && isUndefined(data) && key) {\n        // SWR should throw when trying to use Suspense on the server with React 18,\n        // without providing any initial data. See:\n        // https://github.com/vercel/swr/issues/1832\n        if (!IS_REACT_LEGACY && IS_SERVER) {\n            throw new Error('Fallback data is required when using suspense in SSR.');\n        }\n        // Always update fetcher and config refs even with the Suspense mode.\n        fetcherRef.current = fetcher;\n        configRef.current = config;\n        unmountedRef.current = false;\n        throw isUndefined(error) ? revalidate(WITH_DEDUPE) : error;\n    }\n    return {\n        mutate: boundMutate,\n        get data () {\n            stateDependencies.data = true;\n            return returnedData;\n        },\n        get error () {\n            stateDependencies.error = true;\n            return error;\n        },\n        get isValidating () {\n            stateDependencies.isValidating = true;\n            return isValidating;\n        },\n        get isLoading () {\n            stateDependencies.isLoading = true;\n            return isLoading;\n        }\n    };\n};\nconst SWRConfig = OBJECT.defineProperty(SWRConfig$1, 'defaultValue', {\n    value: defaultConfig\n});\nconst unstable_serialize = (key)=>serialize(key)[0];\n/**\n * A hook to fetch data.\n *\n * @link https://swr.vercel.app\n * @example\n * ```jsx\n * import useSWR from 'swr'\n * function Profile() {\n *   const { data, error } = useSWR('/api/user', fetcher)\n *   if (error) return <div>failed to load</div>\n *   if (!data) return <div>loading...</div>\n *   return <div>hello {data.name}!</div>\n * }\n * ```\n */ var useSWR = withArgs(useSWRHandler);\n\n// useSWR\n\nexport { SWRConfig, useSWR as default, unstable_serialize };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}