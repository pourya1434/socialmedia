{"ast":null,"code":"import React, { useEffect, useLayoutEffect, createContext, useContext, useMemo, useState, createElement, useRef, useCallback } from 'react'; // Global state used to deduplicate requests and store listeners\n\nconst SWRGlobalState = new WeakMap();\nconst EMPTY_CACHE = {};\n\nconst noop = () => {}; // Using noop() as the undefined value as undefined can be replaced\n// by something else. Prettier ignore and extra parentheses are necessary here\n// to ensure that tsc doesn't remove the __NOINLINE__ comment.\n// prettier-ignore\n\n\nconst UNDEFINED =\n/*#__NOINLINE__*/\nnoop();\nconst OBJECT = Object;\n\nconst isUndefined = v => v === UNDEFINED;\n\nconst isFunction = v => typeof v == 'function';\n\nconst mergeObjects = (a, b) => ({ ...a,\n  ...b\n});\n\nconst STR_UNDEFINED = 'undefined'; // NOTE: Use the function to guarantee it's re-evaluated between jsdom and node runtime for tests.\n\nconst isWindowDefined = typeof window != STR_UNDEFINED;\nconst isDocumentDefined = typeof document != STR_UNDEFINED;\n\nconst hasRequestAnimationFrame = () => isWindowDefined && typeof window['requestAnimationFrame'] != STR_UNDEFINED;\n\nconst createCacheHelper = (cache, key) => {\n  const state = SWRGlobalState.get(cache);\n  return [// Getter\n  () => cache.get(key) || EMPTY_CACHE, // Setter\n  info => {\n    const prev = cache.get(key);\n    state[5](key, mergeObjects(prev, info), prev || EMPTY_CACHE);\n  }, // Subscriber\n  state[6]];\n}; // use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\n\n\nconst table = new WeakMap(); // counter of the key\n\nlet counter = 0; // A stable hash implementation that supports:\n// - Fast and ensures unique hash properties\n// - Handles unserializable values\n// - Handles object key ordering\n// - Generates short results\n//\n// This is not a serialization function, and the result is not guaranteed to be\n// parsable.\n\nconst stableHash = arg => {\n  const type = typeof arg;\n  const constructor = arg && arg.constructor;\n  const isDate = constructor == Date;\n  let result;\n  let index;\n\n  if (OBJECT(arg) === arg && !isDate && constructor != RegExp) {\n    // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n    // If it's already hashed, directly return the result.\n    result = table.get(arg);\n    if (result) return result; // Store the hash first for circular reference detection before entering the\n    // recursive `stableHash` calls.\n    // For other objects like set and map, we use this id directly as the hash.\n\n    result = ++counter + '~';\n    table.set(arg, result);\n\n    if (constructor == Array) {\n      // Array.\n      result = '@';\n\n      for (index = 0; index < arg.length; index++) {\n        result += stableHash(arg[index]) + ',';\n      }\n\n      table.set(arg, result);\n    }\n\n    if (constructor == OBJECT) {\n      // Object, sort keys.\n      result = '#';\n      const keys = OBJECT.keys(arg).sort();\n\n      while (!isUndefined(index = keys.pop())) {\n        if (!isUndefined(arg[index])) {\n          result += index + ':' + stableHash(arg[index]) + ',';\n        }\n      }\n\n      table.set(arg, result);\n    }\n  } else {\n    result = isDate ? arg.toJSON() : type == 'symbol' ? arg.toString() : type == 'string' ? JSON.stringify(arg) : '' + arg;\n  }\n\n  return result;\n};\n/**\n * Due to the bug https://bugs.chromium.org/p/chromium/issues/detail?id=678075,\n * it's not reliable to detect if the browser is currently online or offline\n * based on `navigator.onLine`.\n * As a workaround, we always assume it's online on the first load, and change\n * the status upon `online` or `offline` events.\n */\n\n\nlet online = true;\n\nconst isOnline = () => online; // For node and React Native, `add/removeEventListener` doesn't exist on window.\n\n\nconst [onWindowEvent, offWindowEvent] = isWindowDefined && window.addEventListener ? [window.addEventListener.bind(window), window.removeEventListener.bind(window)] : [noop, noop];\n\nconst isVisible = () => {\n  const visibilityState = isDocumentDefined && document.visibilityState;\n  return isUndefined(visibilityState) || visibilityState !== 'hidden';\n};\n\nconst initFocus = callback => {\n  // focus revalidate\n  if (isDocumentDefined) {\n    document.addEventListener('visibilitychange', callback);\n  }\n\n  onWindowEvent('focus', callback);\n  return () => {\n    if (isDocumentDefined) {\n      document.removeEventListener('visibilitychange', callback);\n    }\n\n    offWindowEvent('focus', callback);\n  };\n};\n\nconst initReconnect = callback => {\n  // revalidate on reconnected\n  const onOnline = () => {\n    online = true;\n    callback();\n  }; // nothing to revalidate, just update the status\n\n\n  const onOffline = () => {\n    online = false;\n  };\n\n  onWindowEvent('online', onOnline);\n  onWindowEvent('offline', onOffline);\n  return () => {\n    offWindowEvent('online', onOnline);\n    offWindowEvent('offline', onOffline);\n  };\n};\n\nconst preset = {\n  isOnline,\n  isVisible\n};\nconst defaultConfigOptions = {\n  initFocus,\n  initReconnect\n};\nconst IS_REACT_LEGACY = !React.useId;\nconst IS_SERVER = !isWindowDefined || 'Deno' in window; // Polyfill requestAnimationFrame\n\nconst rAF = f => hasRequestAnimationFrame() ? window['requestAnimationFrame'](f) : setTimeout(f, 1); // React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\n\n\nconst useIsomorphicLayoutEffect = IS_SERVER ? useEffect : useLayoutEffect; // This assignment is to extend the Navigator type to use effectiveType.\n\nconst navigatorConnection = typeof navigator !== 'undefined' && navigator.connection; // Adjust the config based on slow connection status (<= 70Kbps).\n\nconst slowConnection = !IS_SERVER && navigatorConnection && (['slow-2g', '2g'].includes(navigatorConnection.effectiveType) || navigatorConnection.saveData);\n\nconst serialize = key => {\n  if (isFunction(key)) {\n    try {\n      key = key();\n    } catch (err) {\n      // dependencies not ready\n      key = '';\n    }\n  } // Use the original key as the argument of fetcher. This can be a string or an\n  // array of values.\n\n\n  const args = key; // If key is not falsy, or not an empty array, hash it.\n\n  key = typeof key == 'string' ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : '';\n  return [key, args];\n}; // Global timestamp.\n\n\nlet __timestamp = 0;\n\nconst getTimestamp = () => ++__timestamp;\n\nconst FOCUS_EVENT = 0;\nconst RECONNECT_EVENT = 1;\nconst MUTATE_EVENT = 2;\nvar constants = {\n  __proto__: null,\n  FOCUS_EVENT: FOCUS_EVENT,\n  RECONNECT_EVENT: RECONNECT_EVENT,\n  MUTATE_EVENT: MUTATE_EVENT\n};\n\nasync function internalMutate() {\n  for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  const [cache, _key, _data, _opts] = args; // When passing as a boolean, it's explicitly used to disable/enable\n  // revalidation.\n\n  const options = mergeObjects({\n    populateCache: true,\n    throwOnError: true\n  }, typeof _opts === 'boolean' ? {\n    revalidate: _opts\n  } : _opts || {});\n  let populateCache = options.populateCache;\n  const rollbackOnErrorOption = options.rollbackOnError;\n  let optimisticData = options.optimisticData;\n  const revalidate = options.revalidate !== false;\n\n  const rollbackOnError = error => {\n    return typeof rollbackOnErrorOption === 'function' ? rollbackOnErrorOption(error) : rollbackOnErrorOption !== false;\n  };\n\n  const throwOnError = options.throwOnError; // If the second argument is a key filter, return the mutation results for all\n  // filtered keys.\n\n  if (isFunction(_key)) {\n    const keyFilter = _key;\n    const matchedKeys = [];\n    const it = cache.keys();\n\n    for (let keyIt = it.next(); !keyIt.done; keyIt = it.next()) {\n      const key = keyIt.value;\n\n      if ( // Skip the special useSWRInfinite keys.\n      !key.startsWith('$inf$') && keyFilter(cache.get(key)._k)) {\n        matchedKeys.push(key);\n      }\n    }\n\n    return Promise.all(matchedKeys.map(mutateByKey));\n  }\n\n  return mutateByKey(_key);\n\n  async function mutateByKey(_k) {\n    // Serialize key\n    const [key] = serialize(_k);\n    if (!key) return;\n    const [get, set] = createCacheHelper(cache, key);\n    const [EVENT_REVALIDATORS, MUTATION, FETCH] = SWRGlobalState.get(cache);\n    const revalidators = EVENT_REVALIDATORS[key];\n\n    const startRevalidate = () => {\n      if (revalidate) {\n        // Invalidate the key by deleting the concurrent request markers so new\n        // requests will not be deduped.\n        delete FETCH[key];\n\n        if (revalidators && revalidators[0]) {\n          return revalidators[0](MUTATE_EVENT).then(() => get().data);\n        }\n      }\n\n      return get().data;\n    }; // If there is no new data provided, revalidate the key with current state.\n\n\n    if (args.length < 3) {\n      // Revalidate and broadcast state.\n      return startRevalidate();\n    }\n\n    let data = _data;\n    let error; // Update global timestamps.\n\n    const beforeMutationTs = getTimestamp();\n    MUTATION[key] = [beforeMutationTs, 0];\n    const hasOptimisticData = !isUndefined(optimisticData);\n    const state = get(); // `displayedData` is the current value on screen. It could be the optimistic value\n    // that is going to be overridden by a `committedData`, or get reverted back.\n    // `committedData` is the validated value that comes from a fetch or mutation.\n\n    const displayedData = state.data;\n    const currentData = state._c;\n    const committedData = isUndefined(currentData) ? displayedData : currentData; // Do optimistic data update.\n\n    if (hasOptimisticData) {\n      optimisticData = isFunction(optimisticData) ? optimisticData(committedData) : optimisticData; // When we set optimistic data, backup the current committedData data in `_c`.\n\n      set({\n        data: optimisticData,\n        _c: committedData\n      });\n    }\n\n    if (isFunction(data)) {\n      // `data` is a function, call it passing current cache value.\n      try {\n        data = data(committedData);\n      } catch (err) {\n        // If it throws an error synchronously, we shouldn't update the cache.\n        error = err;\n      }\n    } // `data` is a promise/thenable, resolve the final data first.\n\n\n    if (data && isFunction(data.then)) {\n      // This means that the mutation is async, we need to check timestamps to\n      // avoid race conditions.\n      data = await data.catch(err => {\n        error = err;\n      }); // Check if other mutations have occurred since we've started this mutation.\n      // If there's a race we don't update cache or broadcast the change,\n      // just return the data.\n\n      if (beforeMutationTs !== MUTATION[key][0]) {\n        if (error) throw error;\n        return data;\n      } else if (error && hasOptimisticData && rollbackOnError(error)) {\n        // Rollback. Always populate the cache in this case but without\n        // transforming the data.\n        populateCache = true;\n        data = committedData; // Reset data to be the latest committed data, and clear the `_c` value.\n\n        set({\n          data,\n          _c: UNDEFINED\n        });\n      }\n    } // If we should write back the cache after request.\n\n\n    if (populateCache) {\n      if (!error) {\n        // Transform the result into data.\n        if (isFunction(populateCache)) {\n          data = populateCache(data, committedData);\n        } // Only update cached data if there's no error. Data can be `undefined` here.\n\n\n        set({\n          data,\n          _c: UNDEFINED\n        });\n      }\n    } // Reset the timestamp to mark the mutation has ended.\n\n\n    MUTATION[key][1] = getTimestamp(); // Update existing SWR Hooks' internal states:\n\n    const res = await startRevalidate(); // The mutation and revalidation are ended, we can clear it since the data is\n    // not an optimistic value anymore.\n\n    set({\n      _c: UNDEFINED\n    }); // Throw error or return data\n\n    if (error) {\n      if (throwOnError) throw error;\n      return;\n    }\n\n    return populateCache ? res : data;\n  }\n}\n\nconst revalidateAllKeys = (revalidators, type) => {\n  for (const key in revalidators) {\n    if (revalidators[key][0]) revalidators[key][0](type);\n  }\n};\n\nconst initCache = (provider, options) => {\n  // The global state for a specific provider will be used to deduplicate\n  // requests and store listeners. As well as a mutate function that is bound to\n  // the cache.\n  // The provider's global state might be already initialized. Let's try to get the\n  // global state associated with the provider first.\n  if (!SWRGlobalState.has(provider)) {\n    const opts = mergeObjects(defaultConfigOptions, options); // If there's no global state bound to the provider, create a new one with the\n    // new mutate function.\n\n    const EVENT_REVALIDATORS = {};\n    const mutate = internalMutate.bind(UNDEFINED, provider);\n    let unmount = noop;\n    const subscriptions = {};\n\n    const subscribe = (key, callback) => {\n      const subs = subscriptions[key] || [];\n      subscriptions[key] = subs;\n      subs.push(callback);\n      return () => subs.splice(subs.indexOf(callback), 1);\n    };\n\n    const setter = (key, value, prev) => {\n      provider.set(key, value);\n      const subs = subscriptions[key];\n\n      if (subs) {\n        for (let i = subs.length; i--;) {\n          subs[i](prev, value);\n        }\n      }\n    };\n\n    const initProvider = () => {\n      if (!SWRGlobalState.has(provider)) {\n        // Update the state if it's new, or if the provider has been extended.\n        SWRGlobalState.set(provider, [EVENT_REVALIDATORS, {}, {}, {}, mutate, setter, subscribe]);\n\n        if (!IS_SERVER) {\n          // When listening to the native events for auto revalidations,\n          // we intentionally put a delay (setTimeout) here to make sure they are\n          // fired after immediate JavaScript executions, which can be\n          // React's state updates.\n          // This avoids some unnecessary revalidations such as\n          // https://github.com/vercel/swr/issues/1680.\n          const releaseFocus = opts.initFocus(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, FOCUS_EVENT)));\n          const releaseReconnect = opts.initReconnect(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, RECONNECT_EVENT)));\n\n          unmount = () => {\n            releaseFocus && releaseFocus();\n            releaseReconnect && releaseReconnect(); // When un-mounting, we need to remove the cache provider from the state\n            // storage too because it's a side-effect. Otherwise, when re-mounting we\n            // will not re-register those event listeners.\n\n            SWRGlobalState.delete(provider);\n          };\n        }\n      }\n    };\n\n    initProvider(); // This is a new provider, we need to initialize it and setup DOM events\n    // listeners for `focus` and `reconnect` actions.\n    // We might want to inject an extra layer on top of `provider` in the future,\n    // such as key serialization, auto GC, etc.\n    // For now, it's just a `Map` interface without any modifications.\n\n    return [provider, mutate, initProvider, unmount];\n  }\n\n  return [provider, SWRGlobalState.get(provider)[4]];\n}; // error retry\n\n\nconst onErrorRetry = (_, __, config, revalidate, opts) => {\n  const maxRetryCount = config.errorRetryCount;\n  const currentRetryCount = opts.retryCount; // Exponential backoff\n\n  const timeout = ~~((Math.random() + 0.5) * (1 << (currentRetryCount < 8 ? currentRetryCount : 8))) * config.errorRetryInterval;\n\n  if (!isUndefined(maxRetryCount) && currentRetryCount > maxRetryCount) {\n    return;\n  }\n\n  setTimeout(revalidate, timeout, opts);\n};\n\nconst compare = (currentData, newData) => stableHash(currentData) == stableHash(newData); // Default cache provider\n\n\nconst [cache, mutate] = initCache(new Map()); // Default config\n\nconst defaultConfig = mergeObjects({\n  // events\n  onLoadingSlow: noop,\n  onSuccess: noop,\n  onError: noop,\n  onErrorRetry,\n  onDiscarded: noop,\n  // switches\n  revalidateOnFocus: true,\n  revalidateOnReconnect: true,\n  revalidateIfStale: true,\n  shouldRetryOnError: true,\n  // timeouts\n  errorRetryInterval: slowConnection ? 10000 : 5000,\n  focusThrottleInterval: 5 * 1000,\n  dedupingInterval: 2 * 1000,\n  loadingTimeout: slowConnection ? 5000 : 3000,\n  // providers\n  compare,\n  isPaused: () => false,\n  cache,\n  mutate,\n  fallback: {}\n}, // use web preset by default\npreset);\n\nconst mergeConfigs = (a, b) => {\n  // Need to create a new object to avoid mutating the original here.\n  const v = mergeObjects(a, b); // If two configs are provided, merge their `use` and `fallback` options.\n\n  if (b) {\n    const {\n      use: u1,\n      fallback: f1\n    } = a;\n    const {\n      use: u2,\n      fallback: f2\n    } = b;\n\n    if (u1 && u2) {\n      v.use = u1.concat(u2);\n    }\n\n    if (f1 && f2) {\n      v.fallback = mergeObjects(f1, f2);\n    }\n  }\n\n  return v;\n};\n\nconst SWRConfigContext = createContext({});\n\nconst SWRConfig = props => {\n  const {\n    value\n  } = props;\n  const parentConfig = useContext(SWRConfigContext);\n  const isFunctionalConfig = isFunction(value);\n  const config = useMemo(() => isFunctionalConfig ? value(parentConfig) : value, [isFunctionalConfig, parentConfig, value]); // Extend parent context values and middleware.\n\n  const extendedConfig = useMemo(() => isFunctionalConfig ? config : mergeConfigs(parentConfig, config), [isFunctionalConfig, parentConfig, config]); // Should not use the inherited provider.\n\n  const provider = config && config.provider; // Use a lazy initialized state to create the cache on first access.\n\n  const [cacheContext] = useState(() => provider ? initCache(provider(extendedConfig.cache || cache), config) : UNDEFINED); // Override the cache if a new provider is given.\n\n  if (cacheContext) {\n    extendedConfig.cache = cacheContext[0];\n    extendedConfig.mutate = cacheContext[1];\n  } // Unsubscribe events.\n\n\n  useIsomorphicLayoutEffect(() => {\n    if (cacheContext) {\n      cacheContext[2] && cacheContext[2]();\n      return cacheContext[3];\n    }\n  }, []);\n  return createElement(SWRConfigContext.Provider, mergeObjects(props, {\n    value: extendedConfig\n  }));\n}; // @ts-expect-error\n\n\nconst enableDevtools = isWindowDefined && window.__SWR_DEVTOOLS_USE__;\nconst use = enableDevtools ? window.__SWR_DEVTOOLS_USE__ : [];\n\nconst setupDevTools = () => {\n  if (enableDevtools) {\n    // @ts-expect-error\n    window.__SWR_DEVTOOLS_REACT__ = React;\n  }\n};\n\nconst normalize = args => {\n  return isFunction(args[1]) ? [args[0], args[1], args[2] || {}] : [args[0], null, (args[1] === null ? args[2] : args[1]) || {}];\n};\n\nconst useSWRConfig = () => {\n  return mergeObjects(defaultConfig, useContext(SWRConfigContext));\n};\n\nconst preload = (key_, fetcher) => {\n  const key = serialize(key_)[0];\n  const [,,, PRELOAD] = SWRGlobalState.get(cache); // Prevent preload to be called multiple times before used.\n\n  if (PRELOAD[key]) return PRELOAD[key];\n  const req = fetcher(key_);\n  PRELOAD[key] = req;\n  return req;\n};\n\nconst middleware = useSWRNext => (key_, fetcher_, config) => {\n  // fetcher might be a sync function, so this should not be an async function\n  const fetcher = fetcher_ && function () {\n    const key = serialize(key_)[0];\n    const [,,, PRELOAD] = SWRGlobalState.get(cache);\n    const req = PRELOAD[key];\n\n    if (req) {\n      delete PRELOAD[key];\n      return req;\n    }\n\n    return fetcher_(...arguments);\n  };\n\n  return useSWRNext(key_, fetcher, config);\n};\n\nconst BUILT_IN_MIDDLEWARE = use.concat(middleware); // It's tricky to pass generic types as parameters, so we just directly override\n// the types here.\n\nconst withArgs = hook => {\n  return function useSWRArgs() {\n    // Get the default and inherited configuration.\n    const fallbackConfig = useSWRConfig(); // Normalize arguments.\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    const [key, fn, _config] = normalize(args); // Merge configurations.\n\n    const config = mergeConfigs(fallbackConfig, _config); // Apply middleware\n\n    let next = hook;\n    const {\n      use\n    } = config;\n    const middleware = (use || []).concat(BUILT_IN_MIDDLEWARE);\n\n    for (let i = middleware.length; i--;) {\n      next = middleware[i](next);\n    }\n\n    return next(key, fn || config.fetcher || null, config);\n  };\n};\n/**\n * An implementation of state with dependency-tracking.\n */\n\n\nconst useStateWithDeps = state => {\n  const rerender = useState({})[1];\n  const unmountedRef = useRef(false);\n  const stateRef = useRef(state); // If a state property (data, error, or isValidating) is accessed by the render\n  // function, we mark the property as a dependency so if it is updated again\n  // in the future, we trigger a rerender.\n  // This is also known as dependency-tracking.\n\n  const stateDependenciesRef = useRef({\n    data: false,\n    error: false,\n    isValidating: false\n  });\n  /**\n  * @param payload To change stateRef, pass the values explicitly to setState:\n  * @example\n  * ```js\n  * setState({\n  *   isValidating: false\n  *   data: newData // set data to newData\n  *   error: undefined // set error to undefined\n  * })\n  *\n  * setState({\n  *   isValidating: false\n  *   data: undefined // set data to undefined\n  *   error: err // set error to err\n  * })\n  * ```\n  */\n\n  const setState = useCallback(payload => {\n    let shouldRerender = false;\n    const currentState = stateRef.current;\n\n    for (const _ in payload) {\n      const k = _; // If the property has changed, update the state and mark rerender as\n      // needed.\n\n      if (currentState[k] !== payload[k]) {\n        currentState[k] = payload[k]; // If the property is accessed by the component, a rerender should be\n        // triggered.\n\n        if (stateDependenciesRef.current[k]) {\n          shouldRerender = true;\n        }\n      }\n    }\n\n    if (shouldRerender && !unmountedRef.current) {\n      if (IS_REACT_LEGACY) {\n        rerender({});\n      } else {\n        React.startTransition(() => rerender({}));\n      }\n    }\n  }, // config.suspense isn't allowed to change during the lifecycle\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  useIsomorphicLayoutEffect(() => {\n    unmountedRef.current = false;\n    return () => {\n      unmountedRef.current = true;\n    };\n  });\n  return [stateRef, stateDependenciesRef.current, setState];\n}; // Add a callback function to a list of keyed callback functions and return\n// the unsubscribe function.\n\n\nconst subscribeCallback = (key, callbacks, callback) => {\n  const keyedRevalidators = callbacks[key] || (callbacks[key] = []);\n  keyedRevalidators.push(callback);\n  return () => {\n    const index = keyedRevalidators.indexOf(callback);\n\n    if (index >= 0) {\n      // O(1): faster than splice\n      keyedRevalidators[index] = keyedRevalidators[keyedRevalidators.length - 1];\n      keyedRevalidators.pop();\n    }\n  };\n}; // Create a custom hook with a middleware\n\n\nconst withMiddleware = (useSWR, middleware) => {\n  return function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    const [key, fn, config] = normalize(args);\n    const uses = (config.use || []).concat(middleware);\n    return useSWR(key, fn, { ...config,\n      use: uses\n    });\n  };\n};\n\nsetupDevTools();\nexport { IS_REACT_LEGACY, IS_SERVER, OBJECT, SWRConfig, SWRGlobalState, UNDEFINED, cache, compare, createCacheHelper, defaultConfig, defaultConfigOptions, getTimestamp, hasRequestAnimationFrame, initCache, internalMutate, isDocumentDefined, isFunction, isUndefined, isWindowDefined, mergeConfigs, mergeObjects, mutate, noop, normalize, preload, preset, rAF, constants as revalidateEvents, serialize, slowConnection, stableHash, subscribeCallback, useIsomorphicLayoutEffect, useSWRConfig, useStateWithDeps, withArgs, withMiddleware };","map":{"version":3,"names":["React","useEffect","useLayoutEffect","createContext","useContext","useMemo","useState","createElement","useRef","useCallback","SWRGlobalState","WeakMap","EMPTY_CACHE","noop","UNDEFINED","OBJECT","Object","isUndefined","v","isFunction","mergeObjects","a","b","STR_UNDEFINED","isWindowDefined","window","isDocumentDefined","document","hasRequestAnimationFrame","createCacheHelper","cache","key","state","get","info","prev","table","counter","stableHash","arg","type","constructor","isDate","Date","result","index","RegExp","set","Array","length","keys","sort","pop","toJSON","toString","JSON","stringify","online","isOnline","onWindowEvent","offWindowEvent","addEventListener","bind","removeEventListener","isVisible","visibilityState","initFocus","callback","initReconnect","onOnline","onOffline","preset","defaultConfigOptions","IS_REACT_LEGACY","useId","IS_SERVER","rAF","f","setTimeout","useIsomorphicLayoutEffect","navigatorConnection","navigator","connection","slowConnection","includes","effectiveType","saveData","serialize","err","args","isArray","__timestamp","getTimestamp","FOCUS_EVENT","RECONNECT_EVENT","MUTATE_EVENT","constants","__proto__","internalMutate","_key","_data","_opts","options","populateCache","throwOnError","revalidate","rollbackOnErrorOption","rollbackOnError","optimisticData","error","keyFilter","matchedKeys","it","keyIt","next","done","value","startsWith","_k","push","Promise","all","map","mutateByKey","EVENT_REVALIDATORS","MUTATION","FETCH","revalidators","startRevalidate","then","data","beforeMutationTs","hasOptimisticData","displayedData","currentData","_c","committedData","catch","res","revalidateAllKeys","initCache","provider","has","opts","mutate","unmount","subscriptions","subscribe","subs","splice","indexOf","setter","i","initProvider","releaseFocus","releaseReconnect","delete","onErrorRetry","_","__","config","maxRetryCount","errorRetryCount","currentRetryCount","retryCount","timeout","Math","random","errorRetryInterval","compare","newData","Map","defaultConfig","onLoadingSlow","onSuccess","onError","onDiscarded","revalidateOnFocus","revalidateOnReconnect","revalidateIfStale","shouldRetryOnError","focusThrottleInterval","dedupingInterval","loadingTimeout","isPaused","fallback","mergeConfigs","use","u1","f1","u2","f2","concat","SWRConfigContext","SWRConfig","props","parentConfig","isFunctionalConfig","extendedConfig","cacheContext","Provider","enableDevtools","__SWR_DEVTOOLS_USE__","setupDevTools","__SWR_DEVTOOLS_REACT__","normalize","useSWRConfig","preload","key_","fetcher","PRELOAD","req","middleware","useSWRNext","fetcher_","BUILT_IN_MIDDLEWARE","withArgs","hook","useSWRArgs","fallbackConfig","fn","_config","useStateWithDeps","rerender","unmountedRef","stateRef","stateDependenciesRef","isValidating","setState","payload","shouldRerender","currentState","current","k","startTransition","subscribeCallback","callbacks","keyedRevalidators","withMiddleware","useSWR","uses","revalidateEvents"],"sources":["/home/pourya/codes/socialmedia/frontend/node_modules/swr/_internal/dist/index.mjs"],"sourcesContent":["import React, { useEffect, useLayoutEffect, createContext, useContext, useMemo, useState, createElement, useRef, useCallback } from 'react';\n\n// Global state used to deduplicate requests and store listeners\nconst SWRGlobalState = new WeakMap();\n\nconst EMPTY_CACHE = {};\nconst noop = ()=>{};\n// Using noop() as the undefined value as undefined can be replaced\n// by something else. Prettier ignore and extra parentheses are necessary here\n// to ensure that tsc doesn't remove the __NOINLINE__ comment.\n// prettier-ignore\nconst UNDEFINED = /*#__NOINLINE__*/ noop();\nconst OBJECT = Object;\nconst isUndefined = (v)=>v === UNDEFINED;\nconst isFunction = (v)=>typeof v == 'function';\nconst mergeObjects = (a, b)=>({\n        ...a,\n        ...b\n    });\nconst STR_UNDEFINED = 'undefined';\n// NOTE: Use the function to guarantee it's re-evaluated between jsdom and node runtime for tests.\nconst isWindowDefined = typeof window != STR_UNDEFINED;\nconst isDocumentDefined = typeof document != STR_UNDEFINED;\nconst hasRequestAnimationFrame = ()=>isWindowDefined && typeof window['requestAnimationFrame'] != STR_UNDEFINED;\nconst createCacheHelper = (cache, key)=>{\n    const state = SWRGlobalState.get(cache);\n    return [\n        // Getter\n        ()=>cache.get(key) || EMPTY_CACHE,\n        // Setter\n        (info)=>{\n            const prev = cache.get(key);\n            state[5](key, mergeObjects(prev, info), prev || EMPTY_CACHE);\n        },\n        // Subscriber\n        state[6]\n    ];\n};\n\n// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nconst table = new WeakMap();\n// counter of the key\nlet counter = 0;\n// A stable hash implementation that supports:\n// - Fast and ensures unique hash properties\n// - Handles unserializable values\n// - Handles object key ordering\n// - Generates short results\n//\n// This is not a serialization function, and the result is not guaranteed to be\n// parsable.\nconst stableHash = (arg)=>{\n    const type = typeof arg;\n    const constructor = arg && arg.constructor;\n    const isDate = constructor == Date;\n    let result;\n    let index;\n    if (OBJECT(arg) === arg && !isDate && constructor != RegExp) {\n        // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n        // If it's already hashed, directly return the result.\n        result = table.get(arg);\n        if (result) return result;\n        // Store the hash first for circular reference detection before entering the\n        // recursive `stableHash` calls.\n        // For other objects like set and map, we use this id directly as the hash.\n        result = ++counter + '~';\n        table.set(arg, result);\n        if (constructor == Array) {\n            // Array.\n            result = '@';\n            for(index = 0; index < arg.length; index++){\n                result += stableHash(arg[index]) + ',';\n            }\n            table.set(arg, result);\n        }\n        if (constructor == OBJECT) {\n            // Object, sort keys.\n            result = '#';\n            const keys = OBJECT.keys(arg).sort();\n            while(!isUndefined(index = keys.pop())){\n                if (!isUndefined(arg[index])) {\n                    result += index + ':' + stableHash(arg[index]) + ',';\n                }\n            }\n            table.set(arg, result);\n        }\n    } else {\n        result = isDate ? arg.toJSON() : type == 'symbol' ? arg.toString() : type == 'string' ? JSON.stringify(arg) : '' + arg;\n    }\n    return result;\n};\n\n/**\n * Due to the bug https://bugs.chromium.org/p/chromium/issues/detail?id=678075,\n * it's not reliable to detect if the browser is currently online or offline\n * based on `navigator.onLine`.\n * As a workaround, we always assume it's online on the first load, and change\n * the status upon `online` or `offline` events.\n */ let online = true;\nconst isOnline = ()=>online;\n// For node and React Native, `add/removeEventListener` doesn't exist on window.\nconst [onWindowEvent, offWindowEvent] = isWindowDefined && window.addEventListener ? [\n    window.addEventListener.bind(window),\n    window.removeEventListener.bind(window)\n] : [\n    noop,\n    noop\n];\nconst isVisible = ()=>{\n    const visibilityState = isDocumentDefined && document.visibilityState;\n    return isUndefined(visibilityState) || visibilityState !== 'hidden';\n};\nconst initFocus = (callback)=>{\n    // focus revalidate\n    if (isDocumentDefined) {\n        document.addEventListener('visibilitychange', callback);\n    }\n    onWindowEvent('focus', callback);\n    return ()=>{\n        if (isDocumentDefined) {\n            document.removeEventListener('visibilitychange', callback);\n        }\n        offWindowEvent('focus', callback);\n    };\n};\nconst initReconnect = (callback)=>{\n    // revalidate on reconnected\n    const onOnline = ()=>{\n        online = true;\n        callback();\n    };\n    // nothing to revalidate, just update the status\n    const onOffline = ()=>{\n        online = false;\n    };\n    onWindowEvent('online', onOnline);\n    onWindowEvent('offline', onOffline);\n    return ()=>{\n        offWindowEvent('online', onOnline);\n        offWindowEvent('offline', onOffline);\n    };\n};\nconst preset = {\n    isOnline,\n    isVisible\n};\nconst defaultConfigOptions = {\n    initFocus,\n    initReconnect\n};\n\nconst IS_REACT_LEGACY = !React.useId;\nconst IS_SERVER = !isWindowDefined || 'Deno' in window;\n// Polyfill requestAnimationFrame\nconst rAF = (f)=>hasRequestAnimationFrame() ? window['requestAnimationFrame'](f) : setTimeout(f, 1);\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nconst useIsomorphicLayoutEffect = IS_SERVER ? useEffect : useLayoutEffect;\n// This assignment is to extend the Navigator type to use effectiveType.\nconst navigatorConnection = typeof navigator !== 'undefined' && navigator.connection;\n// Adjust the config based on slow connection status (<= 70Kbps).\nconst slowConnection = !IS_SERVER && navigatorConnection && ([\n    'slow-2g',\n    '2g'\n].includes(navigatorConnection.effectiveType) || navigatorConnection.saveData);\n\nconst serialize = (key)=>{\n    if (isFunction(key)) {\n        try {\n            key = key();\n        } catch (err) {\n            // dependencies not ready\n            key = '';\n        }\n    }\n    // Use the original key as the argument of fetcher. This can be a string or an\n    // array of values.\n    const args = key;\n    // If key is not falsy, or not an empty array, hash it.\n    key = typeof key == 'string' ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : '';\n    return [\n        key,\n        args\n    ];\n};\n\n// Global timestamp.\nlet __timestamp = 0;\nconst getTimestamp = ()=>++__timestamp;\n\nconst FOCUS_EVENT = 0;\nconst RECONNECT_EVENT = 1;\nconst MUTATE_EVENT = 2;\n\nvar constants = {\n  __proto__: null,\n  FOCUS_EVENT: FOCUS_EVENT,\n  RECONNECT_EVENT: RECONNECT_EVENT,\n  MUTATE_EVENT: MUTATE_EVENT\n};\n\nasync function internalMutate(...args) {\n    const [cache, _key, _data, _opts] = args;\n    // When passing as a boolean, it's explicitly used to disable/enable\n    // revalidation.\n    const options = mergeObjects({\n        populateCache: true,\n        throwOnError: true\n    }, typeof _opts === 'boolean' ? {\n        revalidate: _opts\n    } : _opts || {});\n    let populateCache = options.populateCache;\n    const rollbackOnErrorOption = options.rollbackOnError;\n    let optimisticData = options.optimisticData;\n    const revalidate = options.revalidate !== false;\n    const rollbackOnError = (error)=>{\n        return typeof rollbackOnErrorOption === 'function' ? rollbackOnErrorOption(error) : rollbackOnErrorOption !== false;\n    };\n    const throwOnError = options.throwOnError;\n    // If the second argument is a key filter, return the mutation results for all\n    // filtered keys.\n    if (isFunction(_key)) {\n        const keyFilter = _key;\n        const matchedKeys = [];\n        const it = cache.keys();\n        for(let keyIt = it.next(); !keyIt.done; keyIt = it.next()){\n            const key = keyIt.value;\n            if (// Skip the special useSWRInfinite keys.\n            !key.startsWith('$inf$') && keyFilter(cache.get(key)._k)) {\n                matchedKeys.push(key);\n            }\n        }\n        return Promise.all(matchedKeys.map(mutateByKey));\n    }\n    return mutateByKey(_key);\n    async function mutateByKey(_k) {\n        // Serialize key\n        const [key] = serialize(_k);\n        if (!key) return;\n        const [get, set] = createCacheHelper(cache, key);\n        const [EVENT_REVALIDATORS, MUTATION, FETCH] = SWRGlobalState.get(cache);\n        const revalidators = EVENT_REVALIDATORS[key];\n        const startRevalidate = ()=>{\n            if (revalidate) {\n                // Invalidate the key by deleting the concurrent request markers so new\n                // requests will not be deduped.\n                delete FETCH[key];\n                if (revalidators && revalidators[0]) {\n                    return revalidators[0](MUTATE_EVENT).then(()=>get().data);\n                }\n            }\n            return get().data;\n        };\n        // If there is no new data provided, revalidate the key with current state.\n        if (args.length < 3) {\n            // Revalidate and broadcast state.\n            return startRevalidate();\n        }\n        let data = _data;\n        let error;\n        // Update global timestamps.\n        const beforeMutationTs = getTimestamp();\n        MUTATION[key] = [\n            beforeMutationTs,\n            0\n        ];\n        const hasOptimisticData = !isUndefined(optimisticData);\n        const state = get();\n        // `displayedData` is the current value on screen. It could be the optimistic value\n        // that is going to be overridden by a `committedData`, or get reverted back.\n        // `committedData` is the validated value that comes from a fetch or mutation.\n        const displayedData = state.data;\n        const currentData = state._c;\n        const committedData = isUndefined(currentData) ? displayedData : currentData;\n        // Do optimistic data update.\n        if (hasOptimisticData) {\n            optimisticData = isFunction(optimisticData) ? optimisticData(committedData) : optimisticData;\n            // When we set optimistic data, backup the current committedData data in `_c`.\n            set({\n                data: optimisticData,\n                _c: committedData\n            });\n        }\n        if (isFunction(data)) {\n            // `data` is a function, call it passing current cache value.\n            try {\n                data = data(committedData);\n            } catch (err) {\n                // If it throws an error synchronously, we shouldn't update the cache.\n                error = err;\n            }\n        }\n        // `data` is a promise/thenable, resolve the final data first.\n        if (data && isFunction(data.then)) {\n            // This means that the mutation is async, we need to check timestamps to\n            // avoid race conditions.\n            data = await data.catch((err)=>{\n                error = err;\n            });\n            // Check if other mutations have occurred since we've started this mutation.\n            // If there's a race we don't update cache or broadcast the change,\n            // just return the data.\n            if (beforeMutationTs !== MUTATION[key][0]) {\n                if (error) throw error;\n                return data;\n            } else if (error && hasOptimisticData && rollbackOnError(error)) {\n                // Rollback. Always populate the cache in this case but without\n                // transforming the data.\n                populateCache = true;\n                data = committedData;\n                // Reset data to be the latest committed data, and clear the `_c` value.\n                set({\n                    data,\n                    _c: UNDEFINED\n                });\n            }\n        }\n        // If we should write back the cache after request.\n        if (populateCache) {\n            if (!error) {\n                // Transform the result into data.\n                if (isFunction(populateCache)) {\n                    data = populateCache(data, committedData);\n                }\n                // Only update cached data if there's no error. Data can be `undefined` here.\n                set({\n                    data,\n                    _c: UNDEFINED\n                });\n            }\n        }\n        // Reset the timestamp to mark the mutation has ended.\n        MUTATION[key][1] = getTimestamp();\n        // Update existing SWR Hooks' internal states:\n        const res = await startRevalidate();\n        // The mutation and revalidation are ended, we can clear it since the data is\n        // not an optimistic value anymore.\n        set({\n            _c: UNDEFINED\n        });\n        // Throw error or return data\n        if (error) {\n            if (throwOnError) throw error;\n            return;\n        }\n        return populateCache ? res : data;\n    }\n}\n\nconst revalidateAllKeys = (revalidators, type)=>{\n    for(const key in revalidators){\n        if (revalidators[key][0]) revalidators[key][0](type);\n    }\n};\nconst initCache = (provider, options)=>{\n    // The global state for a specific provider will be used to deduplicate\n    // requests and store listeners. As well as a mutate function that is bound to\n    // the cache.\n    // The provider's global state might be already initialized. Let's try to get the\n    // global state associated with the provider first.\n    if (!SWRGlobalState.has(provider)) {\n        const opts = mergeObjects(defaultConfigOptions, options);\n        // If there's no global state bound to the provider, create a new one with the\n        // new mutate function.\n        const EVENT_REVALIDATORS = {};\n        const mutate = internalMutate.bind(UNDEFINED, provider);\n        let unmount = noop;\n        const subscriptions = {};\n        const subscribe = (key, callback)=>{\n            const subs = subscriptions[key] || [];\n            subscriptions[key] = subs;\n            subs.push(callback);\n            return ()=>subs.splice(subs.indexOf(callback), 1);\n        };\n        const setter = (key, value, prev)=>{\n            provider.set(key, value);\n            const subs = subscriptions[key];\n            if (subs) {\n                for(let i = subs.length; i--;){\n                    subs[i](prev, value);\n                }\n            }\n        };\n        const initProvider = ()=>{\n            if (!SWRGlobalState.has(provider)) {\n                // Update the state if it's new, or if the provider has been extended.\n                SWRGlobalState.set(provider, [\n                    EVENT_REVALIDATORS,\n                    {},\n                    {},\n                    {},\n                    mutate,\n                    setter,\n                    subscribe\n                ]);\n                if (!IS_SERVER) {\n                    // When listening to the native events for auto revalidations,\n                    // we intentionally put a delay (setTimeout) here to make sure they are\n                    // fired after immediate JavaScript executions, which can be\n                    // React's state updates.\n                    // This avoids some unnecessary revalidations such as\n                    // https://github.com/vercel/swr/issues/1680.\n                    const releaseFocus = opts.initFocus(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, FOCUS_EVENT)));\n                    const releaseReconnect = opts.initReconnect(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, RECONNECT_EVENT)));\n                    unmount = ()=>{\n                        releaseFocus && releaseFocus();\n                        releaseReconnect && releaseReconnect();\n                        // When un-mounting, we need to remove the cache provider from the state\n                        // storage too because it's a side-effect. Otherwise, when re-mounting we\n                        // will not re-register those event listeners.\n                        SWRGlobalState.delete(provider);\n                    };\n                }\n            }\n        };\n        initProvider();\n        // This is a new provider, we need to initialize it and setup DOM events\n        // listeners for `focus` and `reconnect` actions.\n        // We might want to inject an extra layer on top of `provider` in the future,\n        // such as key serialization, auto GC, etc.\n        // For now, it's just a `Map` interface without any modifications.\n        return [\n            provider,\n            mutate,\n            initProvider,\n            unmount\n        ];\n    }\n    return [\n        provider,\n        SWRGlobalState.get(provider)[4]\n    ];\n};\n\n// error retry\nconst onErrorRetry = (_, __, config, revalidate, opts)=>{\n    const maxRetryCount = config.errorRetryCount;\n    const currentRetryCount = opts.retryCount;\n    // Exponential backoff\n    const timeout = ~~((Math.random() + 0.5) * (1 << (currentRetryCount < 8 ? currentRetryCount : 8))) * config.errorRetryInterval;\n    if (!isUndefined(maxRetryCount) && currentRetryCount > maxRetryCount) {\n        return;\n    }\n    setTimeout(revalidate, timeout, opts);\n};\nconst compare = (currentData, newData)=>stableHash(currentData) == stableHash(newData);\n// Default cache provider\nconst [cache, mutate] = initCache(new Map());\n// Default config\nconst defaultConfig = mergeObjects({\n    // events\n    onLoadingSlow: noop,\n    onSuccess: noop,\n    onError: noop,\n    onErrorRetry,\n    onDiscarded: noop,\n    // switches\n    revalidateOnFocus: true,\n    revalidateOnReconnect: true,\n    revalidateIfStale: true,\n    shouldRetryOnError: true,\n    // timeouts\n    errorRetryInterval: slowConnection ? 10000 : 5000,\n    focusThrottleInterval: 5 * 1000,\n    dedupingInterval: 2 * 1000,\n    loadingTimeout: slowConnection ? 5000 : 3000,\n    // providers\n    compare,\n    isPaused: ()=>false,\n    cache,\n    mutate,\n    fallback: {}\n}, // use web preset by default\npreset);\n\nconst mergeConfigs = (a, b)=>{\n    // Need to create a new object to avoid mutating the original here.\n    const v = mergeObjects(a, b);\n    // If two configs are provided, merge their `use` and `fallback` options.\n    if (b) {\n        const { use: u1 , fallback: f1  } = a;\n        const { use: u2 , fallback: f2  } = b;\n        if (u1 && u2) {\n            v.use = u1.concat(u2);\n        }\n        if (f1 && f2) {\n            v.fallback = mergeObjects(f1, f2);\n        }\n    }\n    return v;\n};\n\nconst SWRConfigContext = createContext({});\nconst SWRConfig = (props)=>{\n    const { value  } = props;\n    const parentConfig = useContext(SWRConfigContext);\n    const isFunctionalConfig = isFunction(value);\n    const config = useMemo(()=>isFunctionalConfig ? value(parentConfig) : value, [\n        isFunctionalConfig,\n        parentConfig,\n        value\n    ]);\n    // Extend parent context values and middleware.\n    const extendedConfig = useMemo(()=>isFunctionalConfig ? config : mergeConfigs(parentConfig, config), [\n        isFunctionalConfig,\n        parentConfig,\n        config\n    ]);\n    // Should not use the inherited provider.\n    const provider = config && config.provider;\n    // Use a lazy initialized state to create the cache on first access.\n    const [cacheContext] = useState(()=>provider ? initCache(provider(extendedConfig.cache || cache), config) : UNDEFINED);\n    // Override the cache if a new provider is given.\n    if (cacheContext) {\n        extendedConfig.cache = cacheContext[0];\n        extendedConfig.mutate = cacheContext[1];\n    }\n    // Unsubscribe events.\n    useIsomorphicLayoutEffect(()=>{\n        if (cacheContext) {\n            cacheContext[2] && cacheContext[2]();\n            return cacheContext[3];\n        }\n    }, []);\n    return createElement(SWRConfigContext.Provider, mergeObjects(props, {\n        value: extendedConfig\n    }));\n};\n\n// @ts-expect-error\nconst enableDevtools = isWindowDefined && window.__SWR_DEVTOOLS_USE__;\nconst use = enableDevtools ? window.__SWR_DEVTOOLS_USE__ : [];\nconst setupDevTools = ()=>{\n    if (enableDevtools) {\n        // @ts-expect-error\n        window.__SWR_DEVTOOLS_REACT__ = React;\n    }\n};\n\nconst normalize = (args)=>{\n    return isFunction(args[1]) ? [\n        args[0],\n        args[1],\n        args[2] || {}\n    ] : [\n        args[0],\n        null,\n        (args[1] === null ? args[2] : args[1]) || {}\n    ];\n};\n\nconst useSWRConfig = ()=>{\n    return mergeObjects(defaultConfig, useContext(SWRConfigContext));\n};\n\nconst preload = (key_, fetcher)=>{\n    const key = serialize(key_)[0];\n    const [, , , PRELOAD] = SWRGlobalState.get(cache);\n    // Prevent preload to be called multiple times before used.\n    if (PRELOAD[key]) return PRELOAD[key];\n    const req = fetcher(key_);\n    PRELOAD[key] = req;\n    return req;\n};\nconst middleware = (useSWRNext)=>(key_, fetcher_, config)=>{\n        // fetcher might be a sync function, so this should not be an async function\n        const fetcher = fetcher_ && ((...args)=>{\n            const key = serialize(key_)[0];\n            const [, , , PRELOAD] = SWRGlobalState.get(cache);\n            const req = PRELOAD[key];\n            if (req) {\n                delete PRELOAD[key];\n                return req;\n            }\n            return fetcher_(...args);\n        });\n        return useSWRNext(key_, fetcher, config);\n    };\n\nconst BUILT_IN_MIDDLEWARE = use.concat(middleware);\n\n// It's tricky to pass generic types as parameters, so we just directly override\n// the types here.\nconst withArgs = (hook)=>{\n    return function useSWRArgs(...args) {\n        // Get the default and inherited configuration.\n        const fallbackConfig = useSWRConfig();\n        // Normalize arguments.\n        const [key, fn, _config] = normalize(args);\n        // Merge configurations.\n        const config = mergeConfigs(fallbackConfig, _config);\n        // Apply middleware\n        let next = hook;\n        const { use  } = config;\n        const middleware = (use || []).concat(BUILT_IN_MIDDLEWARE);\n        for(let i = middleware.length; i--;){\n            next = middleware[i](next);\n        }\n        return next(key, fn || config.fetcher || null, config);\n    };\n};\n\n/**\n * An implementation of state with dependency-tracking.\n */ const useStateWithDeps = (state)=>{\n    const rerender = useState({})[1];\n    const unmountedRef = useRef(false);\n    const stateRef = useRef(state);\n    // If a state property (data, error, or isValidating) is accessed by the render\n    // function, we mark the property as a dependency so if it is updated again\n    // in the future, we trigger a rerender.\n    // This is also known as dependency-tracking.\n    const stateDependenciesRef = useRef({\n        data: false,\n        error: false,\n        isValidating: false\n    });\n    /**\n   * @param payload To change stateRef, pass the values explicitly to setState:\n   * @example\n   * ```js\n   * setState({\n   *   isValidating: false\n   *   data: newData // set data to newData\n   *   error: undefined // set error to undefined\n   * })\n   *\n   * setState({\n   *   isValidating: false\n   *   data: undefined // set data to undefined\n   *   error: err // set error to err\n   * })\n   * ```\n   */ const setState = useCallback((payload)=>{\n        let shouldRerender = false;\n        const currentState = stateRef.current;\n        for(const _ in payload){\n            const k = _;\n            // If the property has changed, update the state and mark rerender as\n            // needed.\n            if (currentState[k] !== payload[k]) {\n                currentState[k] = payload[k];\n                // If the property is accessed by the component, a rerender should be\n                // triggered.\n                if (stateDependenciesRef.current[k]) {\n                    shouldRerender = true;\n                }\n            }\n        }\n        if (shouldRerender && !unmountedRef.current) {\n            if (IS_REACT_LEGACY) {\n                rerender({});\n            } else {\n                React.startTransition(()=>rerender({}));\n            }\n        }\n    }, // config.suspense isn't allowed to change during the lifecycle\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []);\n    useIsomorphicLayoutEffect(()=>{\n        unmountedRef.current = false;\n        return ()=>{\n            unmountedRef.current = true;\n        };\n    });\n    return [\n        stateRef,\n        stateDependenciesRef.current,\n        setState\n    ];\n};\n\n// Add a callback function to a list of keyed callback functions and return\n// the unsubscribe function.\nconst subscribeCallback = (key, callbacks, callback)=>{\n    const keyedRevalidators = callbacks[key] || (callbacks[key] = []);\n    keyedRevalidators.push(callback);\n    return ()=>{\n        const index = keyedRevalidators.indexOf(callback);\n        if (index >= 0) {\n            // O(1): faster than splice\n            keyedRevalidators[index] = keyedRevalidators[keyedRevalidators.length - 1];\n            keyedRevalidators.pop();\n        }\n    };\n};\n\n// Create a custom hook with a middleware\nconst withMiddleware = (useSWR, middleware)=>{\n    return (...args)=>{\n        const [key, fn, config] = normalize(args);\n        const uses = (config.use || []).concat(middleware);\n        return useSWR(key, fn, {\n            ...config,\n            use: uses\n        });\n    };\n};\n\nsetupDevTools();\n\nexport { IS_REACT_LEGACY, IS_SERVER, OBJECT, SWRConfig, SWRGlobalState, UNDEFINED, cache, compare, createCacheHelper, defaultConfig, defaultConfigOptions, getTimestamp, hasRequestAnimationFrame, initCache, internalMutate, isDocumentDefined, isFunction, isUndefined, isWindowDefined, mergeConfigs, mergeObjects, mutate, noop, normalize, preload, preset, rAF, constants as revalidateEvents, serialize, slowConnection, stableHash, subscribeCallback, useIsomorphicLayoutEffect, useSWRConfig, useStateWithDeps, withArgs, withMiddleware };\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,eAA3B,EAA4CC,aAA5C,EAA2DC,UAA3D,EAAuEC,OAAvE,EAAgFC,QAAhF,EAA0FC,aAA1F,EAAyGC,MAAzG,EAAiHC,WAAjH,QAAoI,OAApI,C,CAEA;;AACA,MAAMC,cAAc,GAAG,IAAIC,OAAJ,EAAvB;AAEA,MAAMC,WAAW,GAAG,EAApB;;AACA,MAAMC,IAAI,GAAG,MAAI,CAAE,CAAnB,C,CACA;AACA;AACA;AACA;;;AACA,MAAMC,SAAS;AAAG;AAAkBD,IAAI,EAAxC;AACA,MAAME,MAAM,GAAGC,MAAf;;AACA,MAAMC,WAAW,GAAIC,CAAD,IAAKA,CAAC,KAAKJ,SAA/B;;AACA,MAAMK,UAAU,GAAID,CAAD,IAAK,OAAOA,CAAP,IAAY,UAApC;;AACA,MAAME,YAAY,GAAG,CAACC,CAAD,EAAIC,CAAJ,MAAS,EACtB,GAAGD,CADmB;EAEtB,GAAGC;AAFmB,CAAT,CAArB;;AAIA,MAAMC,aAAa,GAAG,WAAtB,C,CACA;;AACA,MAAMC,eAAe,GAAG,OAAOC,MAAP,IAAiBF,aAAzC;AACA,MAAMG,iBAAiB,GAAG,OAAOC,QAAP,IAAmBJ,aAA7C;;AACA,MAAMK,wBAAwB,GAAG,MAAIJ,eAAe,IAAI,OAAOC,MAAM,CAAC,uBAAD,CAAb,IAA0CF,aAAlG;;AACA,MAAMM,iBAAiB,GAAG,CAACC,KAAD,EAAQC,GAAR,KAAc;EACpC,MAAMC,KAAK,GAAGtB,cAAc,CAACuB,GAAf,CAAmBH,KAAnB,CAAd;EACA,OAAO,CACH;EACA,MAAIA,KAAK,CAACG,GAAN,CAAUF,GAAV,KAAkBnB,WAFnB,EAGH;EACCsB,IAAD,IAAQ;IACJ,MAAMC,IAAI,GAAGL,KAAK,CAACG,GAAN,CAAUF,GAAV,CAAb;IACAC,KAAK,CAAC,CAAD,CAAL,CAASD,GAAT,EAAcX,YAAY,CAACe,IAAD,EAAOD,IAAP,CAA1B,EAAwCC,IAAI,IAAIvB,WAAhD;EACH,CAPE,EAQH;EACAoB,KAAK,CAAC,CAAD,CATF,CAAP;AAWH,CAbD,C,CAeA;AACA;AACA;AACA;;;AACA,MAAMI,KAAK,GAAG,IAAIzB,OAAJ,EAAd,C,CACA;;AACA,IAAI0B,OAAO,GAAG,CAAd,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAIC,GAAD,IAAO;EACtB,MAAMC,IAAI,GAAG,OAAOD,GAApB;EACA,MAAME,WAAW,GAAGF,GAAG,IAAIA,GAAG,CAACE,WAA/B;EACA,MAAMC,MAAM,GAAGD,WAAW,IAAIE,IAA9B;EACA,IAAIC,MAAJ;EACA,IAAIC,KAAJ;;EACA,IAAI9B,MAAM,CAACwB,GAAD,CAAN,KAAgBA,GAAhB,IAAuB,CAACG,MAAxB,IAAkCD,WAAW,IAAIK,MAArD,EAA6D;IACzD;IACA;IACAF,MAAM,GAAGR,KAAK,CAACH,GAAN,CAAUM,GAAV,CAAT;IACA,IAAIK,MAAJ,EAAY,OAAOA,MAAP,CAJ6C,CAKzD;IACA;IACA;;IACAA,MAAM,GAAG,EAAEP,OAAF,GAAY,GAArB;IACAD,KAAK,CAACW,GAAN,CAAUR,GAAV,EAAeK,MAAf;;IACA,IAAIH,WAAW,IAAIO,KAAnB,EAA0B;MACtB;MACAJ,MAAM,GAAG,GAAT;;MACA,KAAIC,KAAK,GAAG,CAAZ,EAAeA,KAAK,GAAGN,GAAG,CAACU,MAA3B,EAAmCJ,KAAK,EAAxC,EAA2C;QACvCD,MAAM,IAAIN,UAAU,CAACC,GAAG,CAACM,KAAD,CAAJ,CAAV,GAAyB,GAAnC;MACH;;MACDT,KAAK,CAACW,GAAN,CAAUR,GAAV,EAAeK,MAAf;IACH;;IACD,IAAIH,WAAW,IAAI1B,MAAnB,EAA2B;MACvB;MACA6B,MAAM,GAAG,GAAT;MACA,MAAMM,IAAI,GAAGnC,MAAM,CAACmC,IAAP,CAAYX,GAAZ,EAAiBY,IAAjB,EAAb;;MACA,OAAM,CAAClC,WAAW,CAAC4B,KAAK,GAAGK,IAAI,CAACE,GAAL,EAAT,CAAlB,EAAuC;QACnC,IAAI,CAACnC,WAAW,CAACsB,GAAG,CAACM,KAAD,CAAJ,CAAhB,EAA8B;UAC1BD,MAAM,IAAIC,KAAK,GAAG,GAAR,GAAcP,UAAU,CAACC,GAAG,CAACM,KAAD,CAAJ,CAAxB,GAAuC,GAAjD;QACH;MACJ;;MACDT,KAAK,CAACW,GAAN,CAAUR,GAAV,EAAeK,MAAf;IACH;EACJ,CA7BD,MA6BO;IACHA,MAAM,GAAGF,MAAM,GAAGH,GAAG,CAACc,MAAJ,EAAH,GAAkBb,IAAI,IAAI,QAAR,GAAmBD,GAAG,CAACe,QAAJ,EAAnB,GAAoCd,IAAI,IAAI,QAAR,GAAmBe,IAAI,CAACC,SAAL,CAAejB,GAAf,CAAnB,GAAyC,KAAKA,GAAnH;EACH;;EACD,OAAOK,MAAP;AACH,CAvCD;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAI,IAAIa,MAAM,GAAG,IAAb;;AACJ,MAAMC,QAAQ,GAAG,MAAID,MAArB,C,CACA;;;AACA,MAAM,CAACE,aAAD,EAAgBC,cAAhB,IAAkCpC,eAAe,IAAIC,MAAM,CAACoC,gBAA1B,GAA6C,CACjFpC,MAAM,CAACoC,gBAAP,CAAwBC,IAAxB,CAA6BrC,MAA7B,CADiF,EAEjFA,MAAM,CAACsC,mBAAP,CAA2BD,IAA3B,CAAgCrC,MAAhC,CAFiF,CAA7C,GAGpC,CACAZ,IADA,EAEAA,IAFA,CAHJ;;AAOA,MAAMmD,SAAS,GAAG,MAAI;EAClB,MAAMC,eAAe,GAAGvC,iBAAiB,IAAIC,QAAQ,CAACsC,eAAtD;EACA,OAAOhD,WAAW,CAACgD,eAAD,CAAX,IAAgCA,eAAe,KAAK,QAA3D;AACH,CAHD;;AAIA,MAAMC,SAAS,GAAIC,QAAD,IAAY;EAC1B;EACA,IAAIzC,iBAAJ,EAAuB;IACnBC,QAAQ,CAACkC,gBAAT,CAA0B,kBAA1B,EAA8CM,QAA9C;EACH;;EACDR,aAAa,CAAC,OAAD,EAAUQ,QAAV,CAAb;EACA,OAAO,MAAI;IACP,IAAIzC,iBAAJ,EAAuB;MACnBC,QAAQ,CAACoC,mBAAT,CAA6B,kBAA7B,EAAiDI,QAAjD;IACH;;IACDP,cAAc,CAAC,OAAD,EAAUO,QAAV,CAAd;EACH,CALD;AAMH,CAZD;;AAaA,MAAMC,aAAa,GAAID,QAAD,IAAY;EAC9B;EACA,MAAME,QAAQ,GAAG,MAAI;IACjBZ,MAAM,GAAG,IAAT;IACAU,QAAQ;EACX,CAHD,CAF8B,CAM9B;;;EACA,MAAMG,SAAS,GAAG,MAAI;IAClBb,MAAM,GAAG,KAAT;EACH,CAFD;;EAGAE,aAAa,CAAC,QAAD,EAAWU,QAAX,CAAb;EACAV,aAAa,CAAC,SAAD,EAAYW,SAAZ,CAAb;EACA,OAAO,MAAI;IACPV,cAAc,CAAC,QAAD,EAAWS,QAAX,CAAd;IACAT,cAAc,CAAC,SAAD,EAAYU,SAAZ,CAAd;EACH,CAHD;AAIH,CAhBD;;AAiBA,MAAMC,MAAM,GAAG;EACXb,QADW;EAEXM;AAFW,CAAf;AAIA,MAAMQ,oBAAoB,GAAG;EACzBN,SADyB;EAEzBE;AAFyB,CAA7B;AAKA,MAAMK,eAAe,GAAG,CAACzE,KAAK,CAAC0E,KAA/B;AACA,MAAMC,SAAS,GAAG,CAACnD,eAAD,IAAoB,UAAUC,MAAhD,C,CACA;;AACA,MAAMmD,GAAG,GAAIC,CAAD,IAAKjD,wBAAwB,KAAKH,MAAM,CAAC,uBAAD,CAAN,CAAgCoD,CAAhC,CAAL,GAA0CC,UAAU,CAACD,CAAD,EAAI,CAAJ,CAA7F,C,CACA;AACA;AACA;;;AACA,MAAME,yBAAyB,GAAGJ,SAAS,GAAG1E,SAAH,GAAeC,eAA1D,C,CACA;;AACA,MAAM8E,mBAAmB,GAAG,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAAS,CAACC,UAA1E,C,CACA;;AACA,MAAMC,cAAc,GAAG,CAACR,SAAD,IAAcK,mBAAd,KAAsC,CACzD,SADyD,EAEzD,IAFyD,EAG3DI,QAH2D,CAGlDJ,mBAAmB,CAACK,aAH8B,KAGZL,mBAAmB,CAACM,QAH9C,CAAvB;;AAKA,MAAMC,SAAS,GAAIxD,GAAD,IAAO;EACrB,IAAIZ,UAAU,CAACY,GAAD,CAAd,EAAqB;IACjB,IAAI;MACAA,GAAG,GAAGA,GAAG,EAAT;IACH,CAFD,CAEE,OAAOyD,GAAP,EAAY;MACV;MACAzD,GAAG,GAAG,EAAN;IACH;EACJ,CARoB,CASrB;EACA;;;EACA,MAAM0D,IAAI,GAAG1D,GAAb,CAXqB,CAYrB;;EACAA,GAAG,GAAG,OAAOA,GAAP,IAAc,QAAd,GAAyBA,GAAzB,GAA+B,CAACiB,KAAK,CAAC0C,OAAN,CAAc3D,GAAd,IAAqBA,GAAG,CAACkB,MAAzB,GAAkClB,GAAnC,IAA0CO,UAAU,CAACP,GAAD,CAApD,GAA4D,EAAjG;EACA,OAAO,CACHA,GADG,EAEH0D,IAFG,CAAP;AAIH,CAlBD,C,CAoBA;;;AACA,IAAIE,WAAW,GAAG,CAAlB;;AACA,MAAMC,YAAY,GAAG,MAAI,EAAED,WAA3B;;AAEA,MAAME,WAAW,GAAG,CAApB;AACA,MAAMC,eAAe,GAAG,CAAxB;AACA,MAAMC,YAAY,GAAG,CAArB;AAEA,IAAIC,SAAS,GAAG;EACdC,SAAS,EAAE,IADG;EAEdJ,WAAW,EAAEA,WAFC;EAGdC,eAAe,EAAEA,eAHH;EAIdC,YAAY,EAAEA;AAJA,CAAhB;;AAOA,eAAeG,cAAf,GAAuC;EAAA,kCAANT,IAAM;IAANA,IAAM;EAAA;;EACnC,MAAM,CAAC3D,KAAD,EAAQqE,IAAR,EAAcC,KAAd,EAAqBC,KAArB,IAA8BZ,IAApC,CADmC,CAEnC;EACA;;EACA,MAAMa,OAAO,GAAGlF,YAAY,CAAC;IACzBmF,aAAa,EAAE,IADU;IAEzBC,YAAY,EAAE;EAFW,CAAD,EAGzB,OAAOH,KAAP,KAAiB,SAAjB,GAA6B;IAC5BI,UAAU,EAAEJ;EADgB,CAA7B,GAECA,KAAK,IAAI,EALe,CAA5B;EAMA,IAAIE,aAAa,GAAGD,OAAO,CAACC,aAA5B;EACA,MAAMG,qBAAqB,GAAGJ,OAAO,CAACK,eAAtC;EACA,IAAIC,cAAc,GAAGN,OAAO,CAACM,cAA7B;EACA,MAAMH,UAAU,GAAGH,OAAO,CAACG,UAAR,KAAuB,KAA1C;;EACA,MAAME,eAAe,GAAIE,KAAD,IAAS;IAC7B,OAAO,OAAOH,qBAAP,KAAiC,UAAjC,GAA8CA,qBAAqB,CAACG,KAAD,CAAnE,GAA6EH,qBAAqB,KAAK,KAA9G;EACH,CAFD;;EAGA,MAAMF,YAAY,GAAGF,OAAO,CAACE,YAA7B,CAjBmC,CAkBnC;EACA;;EACA,IAAIrF,UAAU,CAACgF,IAAD,CAAd,EAAsB;IAClB,MAAMW,SAAS,GAAGX,IAAlB;IACA,MAAMY,WAAW,GAAG,EAApB;IACA,MAAMC,EAAE,GAAGlF,KAAK,CAACoB,IAAN,EAAX;;IACA,KAAI,IAAI+D,KAAK,GAAGD,EAAE,CAACE,IAAH,EAAhB,EAA2B,CAACD,KAAK,CAACE,IAAlC,EAAwCF,KAAK,GAAGD,EAAE,CAACE,IAAH,EAAhD,EAA0D;MACtD,MAAMnF,GAAG,GAAGkF,KAAK,CAACG,KAAlB;;MACA,KAAI;MACJ,CAACrF,GAAG,CAACsF,UAAJ,CAAe,OAAf,CAAD,IAA4BP,SAAS,CAAChF,KAAK,CAACG,GAAN,CAAUF,GAAV,EAAeuF,EAAhB,CADrC,EAC0D;QACtDP,WAAW,CAACQ,IAAZ,CAAiBxF,GAAjB;MACH;IACJ;;IACD,OAAOyF,OAAO,CAACC,GAAR,CAAYV,WAAW,CAACW,GAAZ,CAAgBC,WAAhB,CAAZ,CAAP;EACH;;EACD,OAAOA,WAAW,CAACxB,IAAD,CAAlB;;EACA,eAAewB,WAAf,CAA2BL,EAA3B,EAA+B;IAC3B;IACA,MAAM,CAACvF,GAAD,IAAQwD,SAAS,CAAC+B,EAAD,CAAvB;IACA,IAAI,CAACvF,GAAL,EAAU;IACV,MAAM,CAACE,GAAD,EAAMc,GAAN,IAAalB,iBAAiB,CAACC,KAAD,EAAQC,GAAR,CAApC;IACA,MAAM,CAAC6F,kBAAD,EAAqBC,QAArB,EAA+BC,KAA/B,IAAwCpH,cAAc,CAACuB,GAAf,CAAmBH,KAAnB,CAA9C;IACA,MAAMiG,YAAY,GAAGH,kBAAkB,CAAC7F,GAAD,CAAvC;;IACA,MAAMiG,eAAe,GAAG,MAAI;MACxB,IAAIvB,UAAJ,EAAgB;QACZ;QACA;QACA,OAAOqB,KAAK,CAAC/F,GAAD,CAAZ;;QACA,IAAIgG,YAAY,IAAIA,YAAY,CAAC,CAAD,CAAhC,EAAqC;UACjC,OAAOA,YAAY,CAAC,CAAD,CAAZ,CAAgBhC,YAAhB,EAA8BkC,IAA9B,CAAmC,MAAIhG,GAAG,GAAGiG,IAA7C,CAAP;QACH;MACJ;;MACD,OAAOjG,GAAG,GAAGiG,IAAb;IACH,CAVD,CAP2B,CAkB3B;;;IACA,IAAIzC,IAAI,CAACxC,MAAL,GAAc,CAAlB,EAAqB;MACjB;MACA,OAAO+E,eAAe,EAAtB;IACH;;IACD,IAAIE,IAAI,GAAG9B,KAAX;IACA,IAAIS,KAAJ,CAxB2B,CAyB3B;;IACA,MAAMsB,gBAAgB,GAAGvC,YAAY,EAArC;IACAiC,QAAQ,CAAC9F,GAAD,CAAR,GAAgB,CACZoG,gBADY,EAEZ,CAFY,CAAhB;IAIA,MAAMC,iBAAiB,GAAG,CAACnH,WAAW,CAAC2F,cAAD,CAAtC;IACA,MAAM5E,KAAK,GAAGC,GAAG,EAAjB,CAhC2B,CAiC3B;IACA;IACA;;IACA,MAAMoG,aAAa,GAAGrG,KAAK,CAACkG,IAA5B;IACA,MAAMI,WAAW,GAAGtG,KAAK,CAACuG,EAA1B;IACA,MAAMC,aAAa,GAAGvH,WAAW,CAACqH,WAAD,CAAX,GAA2BD,aAA3B,GAA2CC,WAAjE,CAtC2B,CAuC3B;;IACA,IAAIF,iBAAJ,EAAuB;MACnBxB,cAAc,GAAGzF,UAAU,CAACyF,cAAD,CAAV,GAA6BA,cAAc,CAAC4B,aAAD,CAA3C,GAA6D5B,cAA9E,CADmB,CAEnB;;MACA7D,GAAG,CAAC;QACAmF,IAAI,EAAEtB,cADN;QAEA2B,EAAE,EAAEC;MAFJ,CAAD,CAAH;IAIH;;IACD,IAAIrH,UAAU,CAAC+G,IAAD,CAAd,EAAsB;MAClB;MACA,IAAI;QACAA,IAAI,GAAGA,IAAI,CAACM,aAAD,CAAX;MACH,CAFD,CAEE,OAAOhD,GAAP,EAAY;QACV;QACAqB,KAAK,GAAGrB,GAAR;MACH;IACJ,CAxD0B,CAyD3B;;;IACA,IAAI0C,IAAI,IAAI/G,UAAU,CAAC+G,IAAI,CAACD,IAAN,CAAtB,EAAmC;MAC/B;MACA;MACAC,IAAI,GAAG,MAAMA,IAAI,CAACO,KAAL,CAAYjD,GAAD,IAAO;QAC3BqB,KAAK,GAAGrB,GAAR;MACH,CAFY,CAAb,CAH+B,CAM/B;MACA;MACA;;MACA,IAAI2C,gBAAgB,KAAKN,QAAQ,CAAC9F,GAAD,CAAR,CAAc,CAAd,CAAzB,EAA2C;QACvC,IAAI8E,KAAJ,EAAW,MAAMA,KAAN;QACX,OAAOqB,IAAP;MACH,CAHD,MAGO,IAAIrB,KAAK,IAAIuB,iBAAT,IAA8BzB,eAAe,CAACE,KAAD,CAAjD,EAA0D;QAC7D;QACA;QACAN,aAAa,GAAG,IAAhB;QACA2B,IAAI,GAAGM,aAAP,CAJ6D,CAK7D;;QACAzF,GAAG,CAAC;UACAmF,IADA;UAEAK,EAAE,EAAEzH;QAFJ,CAAD,CAAH;MAIH;IACJ,CAjF0B,CAkF3B;;;IACA,IAAIyF,aAAJ,EAAmB;MACf,IAAI,CAACM,KAAL,EAAY;QACR;QACA,IAAI1F,UAAU,CAACoF,aAAD,CAAd,EAA+B;UAC3B2B,IAAI,GAAG3B,aAAa,CAAC2B,IAAD,EAAOM,aAAP,CAApB;QACH,CAJO,CAKR;;;QACAzF,GAAG,CAAC;UACAmF,IADA;UAEAK,EAAE,EAAEzH;QAFJ,CAAD,CAAH;MAIH;IACJ,CA/F0B,CAgG3B;;;IACA+G,QAAQ,CAAC9F,GAAD,CAAR,CAAc,CAAd,IAAmB6D,YAAY,EAA/B,CAjG2B,CAkG3B;;IACA,MAAM8C,GAAG,GAAG,MAAMV,eAAe,EAAjC,CAnG2B,CAoG3B;IACA;;IACAjF,GAAG,CAAC;MACAwF,EAAE,EAAEzH;IADJ,CAAD,CAAH,CAtG2B,CAyG3B;;IACA,IAAI+F,KAAJ,EAAW;MACP,IAAIL,YAAJ,EAAkB,MAAMK,KAAN;MAClB;IACH;;IACD,OAAON,aAAa,GAAGmC,GAAH,GAASR,IAA7B;EACH;AACJ;;AAED,MAAMS,iBAAiB,GAAG,CAACZ,YAAD,EAAevF,IAAf,KAAsB;EAC5C,KAAI,MAAMT,GAAV,IAAiBgG,YAAjB,EAA8B;IAC1B,IAAIA,YAAY,CAAChG,GAAD,CAAZ,CAAkB,CAAlB,CAAJ,EAA0BgG,YAAY,CAAChG,GAAD,CAAZ,CAAkB,CAAlB,EAAqBS,IAArB;EAC7B;AACJ,CAJD;;AAKA,MAAMoG,SAAS,GAAG,CAACC,QAAD,EAAWvC,OAAX,KAAqB;EACnC;EACA;EACA;EACA;EACA;EACA,IAAI,CAAC5F,cAAc,CAACoI,GAAf,CAAmBD,QAAnB,CAAL,EAAmC;IAC/B,MAAME,IAAI,GAAG3H,YAAY,CAACoD,oBAAD,EAAuB8B,OAAvB,CAAzB,CAD+B,CAE/B;IACA;;IACA,MAAMsB,kBAAkB,GAAG,EAA3B;IACA,MAAMoB,MAAM,GAAG9C,cAAc,CAACpC,IAAf,CAAoBhD,SAApB,EAA+B+H,QAA/B,CAAf;IACA,IAAII,OAAO,GAAGpI,IAAd;IACA,MAAMqI,aAAa,GAAG,EAAtB;;IACA,MAAMC,SAAS,GAAG,CAACpH,GAAD,EAAMoC,QAAN,KAAiB;MAC/B,MAAMiF,IAAI,GAAGF,aAAa,CAACnH,GAAD,CAAb,IAAsB,EAAnC;MACAmH,aAAa,CAACnH,GAAD,CAAb,GAAqBqH,IAArB;MACAA,IAAI,CAAC7B,IAAL,CAAUpD,QAAV;MACA,OAAO,MAAIiF,IAAI,CAACC,MAAL,CAAYD,IAAI,CAACE,OAAL,CAAanF,QAAb,CAAZ,EAAoC,CAApC,CAAX;IACH,CALD;;IAMA,MAAMoF,MAAM,GAAG,CAACxH,GAAD,EAAMqF,KAAN,EAAajF,IAAb,KAAoB;MAC/B0G,QAAQ,CAAC9F,GAAT,CAAahB,GAAb,EAAkBqF,KAAlB;MACA,MAAMgC,IAAI,GAAGF,aAAa,CAACnH,GAAD,CAA1B;;MACA,IAAIqH,IAAJ,EAAU;QACN,KAAI,IAAII,CAAC,GAAGJ,IAAI,CAACnG,MAAjB,EAAyBuG,CAAC,EAA1B,GAA8B;UAC1BJ,IAAI,CAACI,CAAD,CAAJ,CAAQrH,IAAR,EAAciF,KAAd;QACH;MACJ;IACJ,CARD;;IASA,MAAMqC,YAAY,GAAG,MAAI;MACrB,IAAI,CAAC/I,cAAc,CAACoI,GAAf,CAAmBD,QAAnB,CAAL,EAAmC;QAC/B;QACAnI,cAAc,CAACqC,GAAf,CAAmB8F,QAAnB,EAA6B,CACzBjB,kBADyB,EAEzB,EAFyB,EAGzB,EAHyB,EAIzB,EAJyB,EAKzBoB,MALyB,EAMzBO,MANyB,EAOzBJ,SAPyB,CAA7B;;QASA,IAAI,CAACxE,SAAL,EAAgB;UACZ;UACA;UACA;UACA;UACA;UACA;UACA,MAAM+E,YAAY,GAAGX,IAAI,CAAC7E,SAAL,CAAeY,UAAU,CAAChB,IAAX,CAAgBhD,SAAhB,EAA2B6H,iBAAiB,CAAC7E,IAAlB,CAAuBhD,SAAvB,EAAkC8G,kBAAlC,EAAsD/B,WAAtD,CAA3B,CAAf,CAArB;UACA,MAAM8D,gBAAgB,GAAGZ,IAAI,CAAC3E,aAAL,CAAmBU,UAAU,CAAChB,IAAX,CAAgBhD,SAAhB,EAA2B6H,iBAAiB,CAAC7E,IAAlB,CAAuBhD,SAAvB,EAAkC8G,kBAAlC,EAAsD9B,eAAtD,CAA3B,CAAnB,CAAzB;;UACAmD,OAAO,GAAG,MAAI;YACVS,YAAY,IAAIA,YAAY,EAA5B;YACAC,gBAAgB,IAAIA,gBAAgB,EAApC,CAFU,CAGV;YACA;YACA;;YACAjJ,cAAc,CAACkJ,MAAf,CAAsBf,QAAtB;UACH,CAPD;QAQH;MACJ;IACJ,CA/BD;;IAgCAY,YAAY,GAvDmB,CAwD/B;IACA;IACA;IACA;IACA;;IACA,OAAO,CACHZ,QADG,EAEHG,MAFG,EAGHS,YAHG,EAIHR,OAJG,CAAP;EAMH;;EACD,OAAO,CACHJ,QADG,EAEHnI,cAAc,CAACuB,GAAf,CAAmB4G,QAAnB,EAA6B,CAA7B,CAFG,CAAP;AAIH,CA9ED,C,CAgFA;;;AACA,MAAMgB,YAAY,GAAG,CAACC,CAAD,EAAIC,EAAJ,EAAQC,MAAR,EAAgBvD,UAAhB,EAA4BsC,IAA5B,KAAmC;EACpD,MAAMkB,aAAa,GAAGD,MAAM,CAACE,eAA7B;EACA,MAAMC,iBAAiB,GAAGpB,IAAI,CAACqB,UAA/B,CAFoD,CAGpD;;EACA,MAAMC,OAAO,GAAG,CAAC,EAAE,CAACC,IAAI,CAACC,MAAL,KAAgB,GAAjB,KAAyB,MAAMJ,iBAAiB,GAAG,CAApB,GAAwBA,iBAAxB,GAA4C,CAAlD,CAAzB,CAAF,CAAD,GAAqFH,MAAM,CAACQ,kBAA5G;;EACA,IAAI,CAACvJ,WAAW,CAACgJ,aAAD,CAAZ,IAA+BE,iBAAiB,GAAGF,aAAvD,EAAsE;IAClE;EACH;;EACDnF,UAAU,CAAC2B,UAAD,EAAa4D,OAAb,EAAsBtB,IAAtB,CAAV;AACH,CATD;;AAUA,MAAM0B,OAAO,GAAG,CAACnC,WAAD,EAAcoC,OAAd,KAAwBpI,UAAU,CAACgG,WAAD,CAAV,IAA2BhG,UAAU,CAACoI,OAAD,CAA7E,C,CACA;;;AACA,MAAM,CAAC5I,KAAD,EAAQkH,MAAR,IAAkBJ,SAAS,CAAC,IAAI+B,GAAJ,EAAD,CAAjC,C,CACA;;AACA,MAAMC,aAAa,GAAGxJ,YAAY,CAAC;EAC/B;EACAyJ,aAAa,EAAEhK,IAFgB;EAG/BiK,SAAS,EAAEjK,IAHoB;EAI/BkK,OAAO,EAAElK,IAJsB;EAK/BgJ,YAL+B;EAM/BmB,WAAW,EAAEnK,IANkB;EAO/B;EACAoK,iBAAiB,EAAE,IARY;EAS/BC,qBAAqB,EAAE,IATQ;EAU/BC,iBAAiB,EAAE,IAVY;EAW/BC,kBAAkB,EAAE,IAXW;EAY/B;EACAZ,kBAAkB,EAAErF,cAAc,GAAG,KAAH,GAAW,IAbd;EAc/BkG,qBAAqB,EAAE,IAAI,IAdI;EAe/BC,gBAAgB,EAAE,IAAI,IAfS;EAgB/BC,cAAc,EAAEpG,cAAc,GAAG,IAAH,GAAU,IAhBT;EAiB/B;EACAsF,OAlB+B;EAmB/Be,QAAQ,EAAE,MAAI,KAnBiB;EAoB/B1J,KApB+B;EAqB/BkH,MArB+B;EAsB/ByC,QAAQ,EAAE;AAtBqB,CAAD,EAuB/B;AACHlH,MAxBkC,CAAlC;;AA0BA,MAAMmH,YAAY,GAAG,CAACrK,CAAD,EAAIC,CAAJ,KAAQ;EACzB;EACA,MAAMJ,CAAC,GAAGE,YAAY,CAACC,CAAD,EAAIC,CAAJ,CAAtB,CAFyB,CAGzB;;EACA,IAAIA,CAAJ,EAAO;IACH,MAAM;MAAEqK,GAAG,EAAEC,EAAP;MAAYH,QAAQ,EAAEI;IAAtB,IAA8BxK,CAApC;IACA,MAAM;MAAEsK,GAAG,EAAEG,EAAP;MAAYL,QAAQ,EAAEM;IAAtB,IAA8BzK,CAApC;;IACA,IAAIsK,EAAE,IAAIE,EAAV,EAAc;MACV5K,CAAC,CAACyK,GAAF,GAAQC,EAAE,CAACI,MAAH,CAAUF,EAAV,CAAR;IACH;;IACD,IAAID,EAAE,IAAIE,EAAV,EAAc;MACV7K,CAAC,CAACuK,QAAF,GAAarK,YAAY,CAACyK,EAAD,EAAKE,EAAL,CAAzB;IACH;EACJ;;EACD,OAAO7K,CAAP;AACH,CAfD;;AAiBA,MAAM+K,gBAAgB,GAAG9L,aAAa,CAAC,EAAD,CAAtC;;AACA,MAAM+L,SAAS,GAAIC,KAAD,IAAS;EACvB,MAAM;IAAE/E;EAAF,IAAa+E,KAAnB;EACA,MAAMC,YAAY,GAAGhM,UAAU,CAAC6L,gBAAD,CAA/B;EACA,MAAMI,kBAAkB,GAAGlL,UAAU,CAACiG,KAAD,CAArC;EACA,MAAM4C,MAAM,GAAG3J,OAAO,CAAC,MAAIgM,kBAAkB,GAAGjF,KAAK,CAACgF,YAAD,CAAR,GAAyBhF,KAAhD,EAAuD,CACzEiF,kBADyE,EAEzED,YAFyE,EAGzEhF,KAHyE,CAAvD,CAAtB,CAJuB,CASvB;;EACA,MAAMkF,cAAc,GAAGjM,OAAO,CAAC,MAAIgM,kBAAkB,GAAGrC,MAAH,GAAY0B,YAAY,CAACU,YAAD,EAAepC,MAAf,CAA/C,EAAuE,CACjGqC,kBADiG,EAEjGD,YAFiG,EAGjGpC,MAHiG,CAAvE,CAA9B,CAVuB,CAevB;;EACA,MAAMnB,QAAQ,GAAGmB,MAAM,IAAIA,MAAM,CAACnB,QAAlC,CAhBuB,CAiBvB;;EACA,MAAM,CAAC0D,YAAD,IAAiBjM,QAAQ,CAAC,MAAIuI,QAAQ,GAAGD,SAAS,CAACC,QAAQ,CAACyD,cAAc,CAACxK,KAAf,IAAwBA,KAAzB,CAAT,EAA0CkI,MAA1C,CAAZ,GAAgElJ,SAA7E,CAA/B,CAlBuB,CAmBvB;;EACA,IAAIyL,YAAJ,EAAkB;IACdD,cAAc,CAACxK,KAAf,GAAuByK,YAAY,CAAC,CAAD,CAAnC;IACAD,cAAc,CAACtD,MAAf,GAAwBuD,YAAY,CAAC,CAAD,CAApC;EACH,CAvBsB,CAwBvB;;;EACAxH,yBAAyB,CAAC,MAAI;IAC1B,IAAIwH,YAAJ,EAAkB;MACdA,YAAY,CAAC,CAAD,CAAZ,IAAmBA,YAAY,CAAC,CAAD,CAAZ,EAAnB;MACA,OAAOA,YAAY,CAAC,CAAD,CAAnB;IACH;EACJ,CALwB,EAKtB,EALsB,CAAzB;EAMA,OAAOhM,aAAa,CAAC0L,gBAAgB,CAACO,QAAlB,EAA4BpL,YAAY,CAAC+K,KAAD,EAAQ;IAChE/E,KAAK,EAAEkF;EADyD,CAAR,CAAxC,CAApB;AAGH,CAlCD,C,CAoCA;;;AACA,MAAMG,cAAc,GAAGjL,eAAe,IAAIC,MAAM,CAACiL,oBAAjD;AACA,MAAMf,GAAG,GAAGc,cAAc,GAAGhL,MAAM,CAACiL,oBAAV,GAAiC,EAA3D;;AACA,MAAMC,aAAa,GAAG,MAAI;EACtB,IAAIF,cAAJ,EAAoB;IAChB;IACAhL,MAAM,CAACmL,sBAAP,GAAgC5M,KAAhC;EACH;AACJ,CALD;;AAOA,MAAM6M,SAAS,GAAIpH,IAAD,IAAQ;EACtB,OAAOtE,UAAU,CAACsE,IAAI,CAAC,CAAD,CAAL,CAAV,GAAsB,CACzBA,IAAI,CAAC,CAAD,CADqB,EAEzBA,IAAI,CAAC,CAAD,CAFqB,EAGzBA,IAAI,CAAC,CAAD,CAAJ,IAAW,EAHc,CAAtB,GAIH,CACAA,IAAI,CAAC,CAAD,CADJ,EAEA,IAFA,EAGA,CAACA,IAAI,CAAC,CAAD,CAAJ,KAAY,IAAZ,GAAmBA,IAAI,CAAC,CAAD,CAAvB,GAA6BA,IAAI,CAAC,CAAD,CAAlC,KAA0C,EAH1C,CAJJ;AASH,CAVD;;AAYA,MAAMqH,YAAY,GAAG,MAAI;EACrB,OAAO1L,YAAY,CAACwJ,aAAD,EAAgBxK,UAAU,CAAC6L,gBAAD,CAA1B,CAAnB;AACH,CAFD;;AAIA,MAAMc,OAAO,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAiB;EAC7B,MAAMlL,GAAG,GAAGwD,SAAS,CAACyH,IAAD,CAAT,CAAgB,CAAhB,CAAZ;EACA,MAAM,KAAOE,OAAP,IAAkBxM,cAAc,CAACuB,GAAf,CAAmBH,KAAnB,CAAxB,CAF6B,CAG7B;;EACA,IAAIoL,OAAO,CAACnL,GAAD,CAAX,EAAkB,OAAOmL,OAAO,CAACnL,GAAD,CAAd;EAClB,MAAMoL,GAAG,GAAGF,OAAO,CAACD,IAAD,CAAnB;EACAE,OAAO,CAACnL,GAAD,CAAP,GAAeoL,GAAf;EACA,OAAOA,GAAP;AACH,CARD;;AASA,MAAMC,UAAU,GAAIC,UAAD,IAAc,CAACL,IAAD,EAAOM,QAAP,EAAiBtD,MAAjB,KAA0B;EACnD;EACA,MAAMiD,OAAO,GAAGK,QAAQ,IAAK,YAAW;IACpC,MAAMvL,GAAG,GAAGwD,SAAS,CAACyH,IAAD,CAAT,CAAgB,CAAhB,CAAZ;IACA,MAAM,KAAOE,OAAP,IAAkBxM,cAAc,CAACuB,GAAf,CAAmBH,KAAnB,CAAxB;IACA,MAAMqL,GAAG,GAAGD,OAAO,CAACnL,GAAD,CAAnB;;IACA,IAAIoL,GAAJ,EAAS;MACL,OAAOD,OAAO,CAACnL,GAAD,CAAd;MACA,OAAOoL,GAAP;IACH;;IACD,OAAOG,QAAQ,CAAC,YAAD,CAAf;EACH,CATD;;EAUA,OAAOD,UAAU,CAACL,IAAD,EAAOC,OAAP,EAAgBjD,MAAhB,CAAjB;AACH,CAbL;;AAeA,MAAMuD,mBAAmB,GAAG5B,GAAG,CAACK,MAAJ,CAAWoB,UAAX,CAA5B,C,CAEA;AACA;;AACA,MAAMI,QAAQ,GAAIC,IAAD,IAAQ;EACrB,OAAO,SAASC,UAAT,GAA6B;IAChC;IACA,MAAMC,cAAc,GAAGb,YAAY,EAAnC,CAFgC,CAGhC;;IAHgC,mCAANrH,IAAM;MAANA,IAAM;IAAA;;IAIhC,MAAM,CAAC1D,GAAD,EAAM6L,EAAN,EAAUC,OAAV,IAAqBhB,SAAS,CAACpH,IAAD,CAApC,CAJgC,CAKhC;;IACA,MAAMuE,MAAM,GAAG0B,YAAY,CAACiC,cAAD,EAAiBE,OAAjB,CAA3B,CANgC,CAOhC;;IACA,IAAI3G,IAAI,GAAGuG,IAAX;IACA,MAAM;MAAE9B;IAAF,IAAW3B,MAAjB;IACA,MAAMoD,UAAU,GAAG,CAACzB,GAAG,IAAI,EAAR,EAAYK,MAAZ,CAAmBuB,mBAAnB,CAAnB;;IACA,KAAI,IAAI/D,CAAC,GAAG4D,UAAU,CAACnK,MAAvB,EAA+BuG,CAAC,EAAhC,GAAoC;MAChCtC,IAAI,GAAGkG,UAAU,CAAC5D,CAAD,CAAV,CAActC,IAAd,CAAP;IACH;;IACD,OAAOA,IAAI,CAACnF,GAAD,EAAM6L,EAAE,IAAI5D,MAAM,CAACiD,OAAb,IAAwB,IAA9B,EAAoCjD,MAApC,CAAX;EACH,CAfD;AAgBH,CAjBD;AAmBA;AACA;AACA;;;AAAI,MAAM8D,gBAAgB,GAAI9L,KAAD,IAAS;EAClC,MAAM+L,QAAQ,GAAGzN,QAAQ,CAAC,EAAD,CAAR,CAAa,CAAb,CAAjB;EACA,MAAM0N,YAAY,GAAGxN,MAAM,CAAC,KAAD,CAA3B;EACA,MAAMyN,QAAQ,GAAGzN,MAAM,CAACwB,KAAD,CAAvB,CAHkC,CAIlC;EACA;EACA;EACA;;EACA,MAAMkM,oBAAoB,GAAG1N,MAAM,CAAC;IAChC0H,IAAI,EAAE,KAD0B;IAEhCrB,KAAK,EAAE,KAFyB;IAGhCsH,YAAY,EAAE;EAHkB,CAAD,CAAnC;EAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAAM,MAAMC,QAAQ,GAAG3N,WAAW,CAAE4N,OAAD,IAAW;IACtC,IAAIC,cAAc,GAAG,KAArB;IACA,MAAMC,YAAY,GAAGN,QAAQ,CAACO,OAA9B;;IACA,KAAI,MAAM1E,CAAV,IAAeuE,OAAf,EAAuB;MACnB,MAAMI,CAAC,GAAG3E,CAAV,CADmB,CAEnB;MACA;;MACA,IAAIyE,YAAY,CAACE,CAAD,CAAZ,KAAoBJ,OAAO,CAACI,CAAD,CAA/B,EAAoC;QAChCF,YAAY,CAACE,CAAD,CAAZ,GAAkBJ,OAAO,CAACI,CAAD,CAAzB,CADgC,CAEhC;QACA;;QACA,IAAIP,oBAAoB,CAACM,OAArB,CAA6BC,CAA7B,CAAJ,EAAqC;UACjCH,cAAc,GAAG,IAAjB;QACH;MACJ;IACJ;;IACD,IAAIA,cAAc,IAAI,CAACN,YAAY,CAACQ,OAApC,EAA6C;MACzC,IAAI/J,eAAJ,EAAqB;QACjBsJ,QAAQ,CAAC,EAAD,CAAR;MACH,CAFD,MAEO;QACH/N,KAAK,CAAC0O,eAAN,CAAsB,MAAIX,QAAQ,CAAC,EAAD,CAAlC;MACH;IACJ;EACJ,CAvB6B,EAuB3B;EACH;EACA,EAzB8B,CAA5B;EA0BFhJ,yBAAyB,CAAC,MAAI;IAC1BiJ,YAAY,CAACQ,OAAb,GAAuB,KAAvB;IACA,OAAO,MAAI;MACPR,YAAY,CAACQ,OAAb,GAAuB,IAAvB;IACH,CAFD;EAGH,CALwB,CAAzB;EAMA,OAAO,CACHP,QADG,EAEHC,oBAAoB,CAACM,OAFlB,EAGHJ,QAHG,CAAP;AAKH,CAlEG,C,CAoEJ;AACA;;;AACA,MAAMO,iBAAiB,GAAG,CAAC5M,GAAD,EAAM6M,SAAN,EAAiBzK,QAAjB,KAA4B;EAClD,MAAM0K,iBAAiB,GAAGD,SAAS,CAAC7M,GAAD,CAAT,KAAmB6M,SAAS,CAAC7M,GAAD,CAAT,GAAiB,EAApC,CAA1B;EACA8M,iBAAiB,CAACtH,IAAlB,CAAuBpD,QAAvB;EACA,OAAO,MAAI;IACP,MAAMtB,KAAK,GAAGgM,iBAAiB,CAACvF,OAAlB,CAA0BnF,QAA1B,CAAd;;IACA,IAAItB,KAAK,IAAI,CAAb,EAAgB;MACZ;MACAgM,iBAAiB,CAAChM,KAAD,CAAjB,GAA2BgM,iBAAiB,CAACA,iBAAiB,CAAC5L,MAAlB,GAA2B,CAA5B,CAA5C;MACA4L,iBAAiB,CAACzL,GAAlB;IACH;EACJ,CAPD;AAQH,CAXD,C,CAaA;;;AACA,MAAM0L,cAAc,GAAG,CAACC,MAAD,EAAS3B,UAAT,KAAsB;EACzC,OAAO,YAAW;IAAA,mCAAP3H,IAAO;MAAPA,IAAO;IAAA;;IACd,MAAM,CAAC1D,GAAD,EAAM6L,EAAN,EAAU5D,MAAV,IAAoB6C,SAAS,CAACpH,IAAD,CAAnC;IACA,MAAMuJ,IAAI,GAAG,CAAChF,MAAM,CAAC2B,GAAP,IAAc,EAAf,EAAmBK,MAAnB,CAA0BoB,UAA1B,CAAb;IACA,OAAO2B,MAAM,CAAChN,GAAD,EAAM6L,EAAN,EAAU,EACnB,GAAG5D,MADgB;MAEnB2B,GAAG,EAAEqD;IAFc,CAAV,CAAb;EAIH,CAPD;AAQH,CATD;;AAWArC,aAAa;AAEb,SAASlI,eAAT,EAA0BE,SAA1B,EAAqC5D,MAArC,EAA6CmL,SAA7C,EAAwDxL,cAAxD,EAAwEI,SAAxE,EAAmFgB,KAAnF,EAA0F2I,OAA1F,EAAmG5I,iBAAnG,EAAsH+I,aAAtH,EAAqIpG,oBAArI,EAA2JoB,YAA3J,EAAyKhE,wBAAzK,EAAmMgH,SAAnM,EAA8M1C,cAA9M,EAA8NxE,iBAA9N,EAAiPP,UAAjP,EAA6PF,WAA7P,EAA0QO,eAA1Q,EAA2RkK,YAA3R,EAAyStK,YAAzS,EAAuT4H,MAAvT,EAA+TnI,IAA/T,EAAqUgM,SAArU,EAAgVE,OAAhV,EAAyVxI,MAAzV,EAAiWK,GAAjW,EAAsWoB,SAAS,IAAIiJ,gBAAnX,EAAqY1J,SAArY,EAAgZJ,cAAhZ,EAAga7C,UAAha,EAA4aqM,iBAA5a,EAA+b5J,yBAA/b,EAA0d+H,YAA1d,EAAwegB,gBAAxe,EAA0fN,QAA1f,EAAogBsB,cAApgB"},"metadata":{},"sourceType":"module"}